{"ast":null,"code":"// ExportOptimizationUtils.js - –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞\n\nexport class PerformanceMonitor {\n  constructor() {\n    this.startTime = null;\n    this.framesTimes = [];\n    this.memorySnapshots = [];\n    this.workerStats = new Map();\n  }\n  start() {\n    this.startTime = Date.now();\n    this.framesTimes = [];\n    this.memorySnapshots = [];\n    this.workerStats.clear();\n  }\n  recordFrame(frameIndex, renderTime) {\n    this.framesTimes.push({\n      index: frameIndex,\n      time: renderTime,\n      timestamp: Date.now() - this.startTime\n    });\n  }\n  recordMemory() {\n    if (performance.memory) {\n      this.memorySnapshots.push({\n        used: performance.memory.usedJSHeapSize,\n        total: performance.memory.totalJSHeapSize,\n        limit: performance.memory.jsHeapSizeLimit,\n        timestamp: Date.now() - this.startTime\n      });\n    }\n  }\n  recordWorkerStats(workerId, stats) {\n    this.workerStats.set(workerId, {\n      ...stats,\n      timestamp: Date.now() - this.startTime\n    });\n  }\n  getAverageRenderingSpeed() {\n    if (this.framesTimes.length < 2) return 0;\n    const totalTime = (Date.now() - this.startTime) / 1000;\n    return this.framesTimes.length / totalTime;\n  }\n  getEstimatedTimeRemaining(totalFrames) {\n    const speed = this.getAverageRenderingSpeed();\n    if (speed === 0) return 0;\n    const remainingFrames = totalFrames - this.framesTimes.length;\n    return remainingFrames / speed;\n  }\n  getMemoryUsage() {\n    if (this.memorySnapshots.length === 0) return 0;\n    const latest = this.memorySnapshots[this.memorySnapshots.length - 1];\n    return Math.round(latest.used / 1024 / 1024); // MB\n  }\n  generateReport() {\n    const totalTime = (Date.now() - this.startTime) / 1000;\n    const avgSpeed = this.getAverageRenderingSpeed();\n    const memoryUsage = this.getMemoryUsage();\n    return {\n      totalTime,\n      framesRendered: this.framesTimes.length,\n      averageSpeed: avgSpeed,\n      memoryUsage,\n      workerCount: this.workerStats.size,\n      efficiency: this.calculateEfficiency()\n    };\n  }\n  calculateEfficiency() {\n    // –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∫ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –∏ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏\n    const theoreticalSpeed = this.workerStats.size * 30; // 30 FPS –Ω–∞ –≤–æ—Ä–∫–µ—Ä\n    const actualSpeed = this.getAverageRenderingSpeed();\n    return Math.min(actualSpeed / theoreticalSpeed * 100, 100);\n  }\n}\nexport class AdaptiveQualityManager {\n  constructor() {\n    this.performanceHistory = [];\n    this.currentSettings = null;\n    this.targetFPS = 30; // –¶–µ–ª–µ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞\n  }\n  updatePerformance(stats) {\n    this.performanceHistory.push({\n      ...stats,\n      timestamp: Date.now()\n    });\n\n    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏–∑–º–µ—Ä–µ–Ω–∏–π\n    if (this.performanceHistory.length > 10) {\n      this.performanceHistory.shift();\n    }\n  }\n  shouldAdjustQuality() {\n    if (this.performanceHistory.length < 3) return false;\n    const recent = this.performanceHistory.slice(-3);\n    const avgSpeed = recent.reduce((sum, stat) => sum + stat.renderingSpeed, 0) / recent.length;\n\n    // –ï—Å–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–Ω–∏–∑–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ\n    return avgSpeed < this.targetFPS * 0.7;\n  }\n  suggestOptimizations(currentSettings) {\n    const suggestions = [];\n    if (this.shouldAdjustQuality()) {\n      // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–Ω–∏–∑–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ\n      if (currentSettings.resolution === \"1920x1080\") {\n        suggestions.push({\n          type: 'resolution',\n          current: '1920x1080',\n          suggested: '1280x720',\n          impact: '–£—Å–∫–æ—Ä–µ–Ω–∏–µ –≤ 2-3 —Ä–∞–∑–∞'\n        });\n      } else if (currentSettings.resolution === \"1280x720\") {\n        suggestions.push({\n          type: 'resolution',\n          current: '1280x720',\n          suggested: '640x480',\n          impact: '–£—Å–∫–æ—Ä–µ–Ω–∏–µ –≤ 1.5-2 —Ä–∞–∑–∞'\n        });\n      }\n\n      // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–Ω–∏–∑–∏—Ç—å FPS\n      if (currentSettings.fps > 24) {\n        suggestions.push({\n          type: 'fps',\n          current: currentSettings.fps,\n          suggested: Math.max(24, currentSettings.fps - 6),\n          impact: '–£—Å–∫–æ—Ä–µ–Ω–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å–Ω–∏–∂–µ–Ω–∏—é FPS'\n        });\n      }\n\n      // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤\n      if (currentSettings.workerCount < navigator.hardwareConcurrency) {\n        suggestions.push({\n          type: 'workers',\n          current: currentSettings.workerCount,\n          suggested: Math.min(currentSettings.workerCount + 1, navigator.hardwareConcurrency),\n          impact: '–£—Å–∫–æ—Ä–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —è–¥–µ—Ä'\n        });\n      }\n    }\n    return suggestions;\n  }\n}\nexport class MemoryManager {\n  constructor() {\n    this.memoryLimit = this.getMemoryLimit();\n    this.cacheSize = 0;\n    this.cleanupCallbacks = [];\n  }\n  getMemoryLimit() {\n    if (performance.memory) {\n      // –ò—Å–ø–æ–ª—å–∑—É–µ–º 80% –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø–∞–º—è—Ç–∏\n      return Math.floor(performance.memory.jsHeapSizeLimit * 0.8);\n    }\n\n    // –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n    return 512 * 1024 * 1024; // 512MB\n  }\n  getCurrentMemoryUsage() {\n    if (performance.memory) {\n      return performance.memory.usedJSHeapSize;\n    }\n    return this.cacheSize; // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞\n  }\n  isMemoryLimitReached() {\n    return this.getCurrentMemoryUsage() > this.memoryLimit;\n  }\n  registerCleanupCallback(callback) {\n    this.cleanupCallbacks.push(callback);\n  }\n  async cleanup() {\n    console.log('üßπ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏...');\n    for (const callback of this.cleanupCallbacks) {\n      try {\n        await callback();\n      } catch (error) {\n        console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', error);\n      }\n    }\n\n    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)\n    if (window.gc) {\n      window.gc();\n    }\n    this.cacheSize = 0;\n  }\n  addToCache(size) {\n    this.cacheSize += size;\n  }\n  removeFromCache(size) {\n    this.cacheSize = Math.max(0, this.cacheSize - size);\n  }\n}\nexport class BatchOptimizer {\n  static calculateOptimalBatchSize(totalFrames, workerCount, memoryLimit) {\n    // –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞\n    let batchSize = Math.ceil(totalFrames / (workerCount * 4));\n\n    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ –ø–∞–º—è—Ç–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ 1MB –Ω–∞ –∫–∞–¥—Ä)\n    const memoryPerFrame = 1024 * 1024; // 1MB\n    const maxBatchSizeByMemory = Math.floor(memoryLimit / (workerCount * memoryPerFrame));\n    batchSize = Math.min(batchSize, maxBatchSizeByMemory);\n\n    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º—É–º–æ–º –∏ –º–∞–∫—Å–∏–º—É–º–æ–º\n    return Math.max(10, Math.min(batchSize, 200));\n  }\n  static createOptimalBatches(totalFrames, workerCount, batchSize) {\n    const batches = [];\n    for (let i = 0; i < totalFrames; i += batchSize) {\n      batches.push({\n        startFrame: i,\n        endFrame: Math.min(i + batchSize, totalFrames),\n        workerId: batches.length % workerCount,\n        priority: i === 0 ? 'high' : 'normal' // –ü–µ—Ä–≤—ã–π –±–∞—Ç—á —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º\n      });\n    }\n    return batches;\n  }\n  static rebalanceBatches(batches, workerStats) {\n    // –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞—Ç—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–æ—Ä–∫–µ—Ä–æ–≤\n    const sortedWorkers = Object.entries(workerStats).sort(([, a], [, b]) => b.performance - a.performance);\n    let batchIndex = 0;\n    for (const batch of batches) {\n      if (batch.status === 'pending') {\n        const workerIndex = batchIndex % sortedWorkers.length;\n        batch.workerId = parseInt(sortedWorkers[workerIndex][0]);\n        batchIndex++;\n      }\n    }\n    return batches;\n  }\n}\nexport class ExportPresetManager {\n  static getRecommendedPreset() {\n    var _performance$memory;\n    const cores = navigator.hardwareConcurrency || 2;\n    const memory = ((_performance$memory = performance.memory) === null || _performance$memory === void 0 ? void 0 : _performance$memory.jsHeapSizeLimit) || 0;\n    const isMobile = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n    if (isMobile || cores <= 2 || memory < 1024 * 1024 * 1024) {\n      return 'mobile';\n    } else if (cores >= 8 && memory > 4 * 1024 * 1024 * 1024) {\n      return 'ultrafast';\n    } else if (cores >= 4) {\n      return 'fast';\n    } else {\n      return 'balanced';\n    }\n  }\n  static applyPreset(presetName, currentSettings) {\n    const preset = this.presets[presetName];\n    if (!preset) return currentSettings;\n    return {\n      ...currentSettings,\n      ...preset,\n      filename: currentSettings.filename // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞\n    };\n  }\n}\nExportPresetManager.presets = {\n  'ultrafast': {\n    name: '–£–ª—å—Ç—Ä–∞ –±—ã—Å—Ç—Ä—ã–π',\n    resolution: '640x480',\n    fps: 24,\n    workerCount: Math.min(navigator.hardwareConcurrency || 2, 6),\n    batchSize: 100,\n    parallelEncoding: true,\n    compatibilityMode: 'baseline',\n    description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å, –±–∞–∑–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ'\n  },\n  'fast': {\n    name: '–ë—ã—Å—Ç—Ä—ã–π',\n    resolution: '1280x720',\n    fps: 30,\n    workerCount: Math.min(navigator.hardwareConcurrency || 2, 4),\n    batchSize: 50,\n    parallelEncoding: true,\n    compatibilityMode: 'standard',\n    description: '–•–æ—Ä–æ—à–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å, —Å—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ'\n  },\n  'balanced': {\n    name: '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π',\n    resolution: '1280x720',\n    fps: 30,\n    workerCount: Math.min(navigator.hardwareConcurrency || 2, 3),\n    batchSize: 25,\n    parallelEncoding: false,\n    compatibilityMode: 'standard',\n    description: '–ë–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞'\n  },\n  'quality': {\n    name: '–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ',\n    resolution: '1920x1080',\n    fps: 30,\n    workerCount: 2,\n    batchSize: 20,\n    parallelEncoding: false,\n    compatibilityMode: 'standard',\n    description: '–õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Å—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å'\n  },\n  'mobile': {\n    name: '–î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö',\n    resolution: '640x480',\n    fps: 24,\n    workerCount: 2,\n    batchSize: 30,\n    parallelEncoding: true,\n    compatibilityMode: 'baseline',\n    description: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Å–ª–∞–±—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤'\n  }\n};\nexport class RenderingPipeline {\n  constructor(workerManager) {\n    this.workerManager = workerManager;\n    this.performanceMonitor = new PerformanceMonitor();\n    this.memoryManager = new MemoryManager();\n    this.qualityManager = new AdaptiveQualityManager();\n    this.isRunning = false;\n  }\n  async initialize(settings) {\n    this.performanceMonitor.start();\n\n    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–ª–±—ç–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏\n    this.memoryManager.registerCleanupCallback(async () => {\n      await this.workerManager.cleanup();\n    });\n    await this.workerManager.initialize(settings);\n  }\n  async renderWithAdaptiveQuality(timelineItems, totalFrames, fps, onProgress) {\n    this.isRunning = true;\n    try {\n      // –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –±–∞—Ç—á–∏\n      const batchSize = BatchOptimizer.calculateOptimalBatchSize(totalFrames, this.workerManager.workerCount, this.memoryManager.memoryLimit);\n      const batches = BatchOptimizer.createOptimalBatches(totalFrames, this.workerManager.workerCount, batchSize);\n      console.log(`üé¨ –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º: ${batches.length} –±–∞—Ç—á–µ–π`);\n      const results = [];\n      let processedFrames = 0;\n      for (const batch of batches) {\n        if (!this.isRunning) break;\n\n        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π\n        if (this.memoryManager.isMemoryLimitReached()) {\n          console.warn('‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–∞–º—è—Ç–∏, –æ—á–∏—Å—Ç–∫–∞...');\n          await this.memoryManager.cleanup();\n        }\n        const batchStartTime = Date.now();\n        try {\n          const batchResults = await this.workerManager.renderBatch(batch.workerId, batch, timelineItems, fps);\n          results.push(...batchResults);\n          processedFrames += batchResults.length;\n\n          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n          const batchTime = Date.now() - batchStartTime;\n          this.performanceMonitor.recordFrame(processedFrames, batchTime);\n          this.performanceMonitor.recordMemory();\n\n          // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å\n          if (onProgress) {\n            const progress = processedFrames / totalFrames * 100;\n            const stats = {\n              framesRendered: processedFrames,\n              renderingSpeed: this.performanceMonitor.getAverageRenderingSpeed(),\n              estimatedTimeRemaining: this.performanceMonitor.getEstimatedTimeRemaining(totalFrames),\n              memoryUsage: this.performanceMonitor.getMemoryUsage()\n            };\n            onProgress(progress, stats);\n          }\n\n          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ\n          this.qualityManager.updatePerformance({\n            renderingSpeed: batchResults.length / (batchTime / 1000),\n            memoryUsage: this.memoryManager.getCurrentMemoryUsage(),\n            batchSize: batchResults.length\n          });\n        } catch (error) {\n          console.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –±–∞—Ç—á–∞:`, error);\n          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –±–∞—Ç—á–∞–º–∏\n        }\n      }\n      return results;\n    } finally {\n      this.isRunning = false;\n    }\n  }\n  stop() {\n    this.isRunning = false;\n  }\n  getPerformanceReport() {\n    return this.performanceMonitor.generateReport();\n  }\n  getOptimizationSuggestions(currentSettings) {\n    return this.qualityManager.suggestOptimizations(currentSettings);\n  }\n}\n\n// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\nexport class DeviceCapabilities {\n  static detect() {\n    var _performance$memory2;\n    const cores = navigator.hardwareConcurrency || 2;\n    const memory = ((_performance$memory2 = performance.memory) === null || _performance$memory2 === void 0 ? void 0 : _performance$memory2.jsHeapSizeLimit) || 0;\n    const isMobile = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n\n    // –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n    let deviceClass = 'low';\n    if (!isMobile && cores >= 8 && memory > 4 * 1024 * 1024 * 1024) {\n      deviceClass = 'high';\n    } else if (!isMobile && cores >= 4 && memory > 2 * 1024 * 1024 * 1024) {\n      deviceClass = 'medium';\n    } else if (cores >= 4) {\n      deviceClass = 'medium-mobile';\n    }\n    return {\n      cores,\n      memory,\n      isMobile,\n      deviceClass,\n      webgl: !!window.WebGLRenderingContext,\n      webgl2: !!window.WebGL2RenderingContext,\n      offscreenCanvas: typeof OffscreenCanvas !== 'undefined',\n      sharedArrayBuffer: typeof SharedArrayBuffer !== 'undefined'\n    };\n  }\n  static getRecommendedSettings() {\n    const capabilities = this.detect();\n    const settings = {\n      low: {\n        maxWorkers: 2,\n        maxResolution: '640x480',\n        maxFPS: 24,\n        batchSize: 20\n      },\n      'medium-mobile': {\n        maxWorkers: 2,\n        maxResolution: '1280x720',\n        maxFPS: 30,\n        batchSize: 30\n      },\n      medium: {\n        maxWorkers: 4,\n        maxResolution: '1280x720',\n        maxFPS: 30,\n        batchSize: 50\n      },\n      high: {\n        maxWorkers: 8,\n        maxResolution: '1920x1080',\n        maxFPS: 60,\n        batchSize: 100\n      }\n    };\n    return settings[capabilities.deviceClass] || settings.low;\n  }\n}\nexport default {\n  PerformanceMonitor,\n  AdaptiveQualityManager,\n  MemoryManager,\n  BatchOptimizer,\n  ExportPresetManager,\n  RenderingPipeline,\n  DeviceCapabilities\n};","map":{"version":3,"names":["PerformanceMonitor","constructor","startTime","framesTimes","memorySnapshots","workerStats","Map","start","Date","now","clear","recordFrame","frameIndex","renderTime","push","index","time","timestamp","recordMemory","performance","memory","used","usedJSHeapSize","total","totalJSHeapSize","limit","jsHeapSizeLimit","recordWorkerStats","workerId","stats","set","getAverageRenderingSpeed","length","totalTime","getEstimatedTimeRemaining","totalFrames","speed","remainingFrames","getMemoryUsage","latest","Math","round","generateReport","avgSpeed","memoryUsage","framesRendered","averageSpeed","workerCount","size","efficiency","calculateEfficiency","theoreticalSpeed","actualSpeed","min","AdaptiveQualityManager","performanceHistory","currentSettings","targetFPS","updatePerformance","shift","shouldAdjustQuality","recent","slice","reduce","sum","stat","renderingSpeed","suggestOptimizations","suggestions","resolution","type","current","suggested","impact","fps","max","navigator","hardwareConcurrency","MemoryManager","memoryLimit","getMemoryLimit","cacheSize","cleanupCallbacks","floor","getCurrentMemoryUsage","isMemoryLimitReached","registerCleanupCallback","callback","cleanup","console","log","error","warn","window","gc","addToCache","removeFromCache","BatchOptimizer","calculateOptimalBatchSize","batchSize","ceil","memoryPerFrame","maxBatchSizeByMemory","createOptimalBatches","batches","i","startFrame","endFrame","priority","rebalanceBatches","sortedWorkers","Object","entries","sort","a","b","batchIndex","batch","status","workerIndex","parseInt","ExportPresetManager","getRecommendedPreset","_performance$memory","cores","isMobile","test","userAgent","applyPreset","presetName","preset","presets","filename","name","parallelEncoding","compatibilityMode","description","RenderingPipeline","workerManager","performanceMonitor","memoryManager","qualityManager","isRunning","initialize","settings","renderWithAdaptiveQuality","timelineItems","onProgress","results","processedFrames","batchStartTime","batchResults","renderBatch","batchTime","progress","estimatedTimeRemaining","stop","getPerformanceReport","getOptimizationSuggestions","DeviceCapabilities","detect","_performance$memory2","deviceClass","webgl","WebGLRenderingContext","webgl2","WebGL2RenderingContext","offscreenCanvas","OffscreenCanvas","sharedArrayBuffer","SharedArrayBuffer","getRecommendedSettings","capabilities","low","maxWorkers","maxResolution","maxFPS","medium","high"],"sources":["C:/Scriptify/ai-content-studio/frontend/src/components/utils/ExportOptimizationUtils.js"],"sourcesContent":["// ExportOptimizationUtils.js - –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞\r\n\r\nexport class PerformanceMonitor {\r\n  constructor() {\r\n    this.startTime = null;\r\n    this.framesTimes = [];\r\n    this.memorySnapshots = [];\r\n    this.workerStats = new Map();\r\n  }\r\n\r\n  start() {\r\n    this.startTime = Date.now();\r\n    this.framesTimes = [];\r\n    this.memorySnapshots = [];\r\n    this.workerStats.clear();\r\n  }\r\n\r\n  recordFrame(frameIndex, renderTime) {\r\n    this.framesTimes.push({\r\n      index: frameIndex,\r\n      time: renderTime,\r\n      timestamp: Date.now() - this.startTime\r\n    });\r\n  }\r\n\r\n  recordMemory() {\r\n    if (performance.memory) {\r\n      this.memorySnapshots.push({\r\n        used: performance.memory.usedJSHeapSize,\r\n        total: performance.memory.totalJSHeapSize,\r\n        limit: performance.memory.jsHeapSizeLimit,\r\n        timestamp: Date.now() - this.startTime\r\n      });\r\n    }\r\n  }\r\n\r\n  recordWorkerStats(workerId, stats) {\r\n    this.workerStats.set(workerId, {\r\n      ...stats,\r\n      timestamp: Date.now() - this.startTime\r\n    });\r\n  }\r\n\r\n  getAverageRenderingSpeed() {\r\n    if (this.framesTimes.length < 2) return 0;\r\n    \r\n    const totalTime = (Date.now() - this.startTime) / 1000;\r\n    return this.framesTimes.length / totalTime;\r\n  }\r\n\r\n  getEstimatedTimeRemaining(totalFrames) {\r\n    const speed = this.getAverageRenderingSpeed();\r\n    if (speed === 0) return 0;\r\n    \r\n    const remainingFrames = totalFrames - this.framesTimes.length;\r\n    return remainingFrames / speed;\r\n  }\r\n\r\n  getMemoryUsage() {\r\n    if (this.memorySnapshots.length === 0) return 0;\r\n    \r\n    const latest = this.memorySnapshots[this.memorySnapshots.length - 1];\r\n    return Math.round(latest.used / 1024 / 1024); // MB\r\n  }\r\n\r\n  generateReport() {\r\n    const totalTime = (Date.now() - this.startTime) / 1000;\r\n    const avgSpeed = this.getAverageRenderingSpeed();\r\n    const memoryUsage = this.getMemoryUsage();\r\n\r\n    return {\r\n      totalTime,\r\n      framesRendered: this.framesTimes.length,\r\n      averageSpeed: avgSpeed,\r\n      memoryUsage,\r\n      workerCount: this.workerStats.size,\r\n      efficiency: this.calculateEfficiency()\r\n    };\r\n  }\r\n\r\n  calculateEfficiency() {\r\n    // –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∫ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –∏ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏\r\n    const theoreticalSpeed = this.workerStats.size * 30; // 30 FPS –Ω–∞ –≤–æ—Ä–∫–µ—Ä\r\n    const actualSpeed = this.getAverageRenderingSpeed();\r\n    return Math.min((actualSpeed / theoreticalSpeed) * 100, 100);\r\n  }\r\n}\r\n\r\nexport class AdaptiveQualityManager {\r\n  constructor() {\r\n    this.performanceHistory = [];\r\n    this.currentSettings = null;\r\n    this.targetFPS = 30; // –¶–µ–ª–µ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞\r\n  }\r\n\r\n  updatePerformance(stats) {\r\n    this.performanceHistory.push({\r\n      ...stats,\r\n      timestamp: Date.now()\r\n    });\r\n\r\n    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏–∑–º–µ—Ä–µ–Ω–∏–π\r\n    if (this.performanceHistory.length > 10) {\r\n      this.performanceHistory.shift();\r\n    }\r\n  }\r\n\r\n  shouldAdjustQuality() {\r\n    if (this.performanceHistory.length < 3) return false;\r\n\r\n    const recent = this.performanceHistory.slice(-3);\r\n    const avgSpeed = recent.reduce((sum, stat) => sum + stat.renderingSpeed, 0) / recent.length;\r\n\r\n    // –ï—Å–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–Ω–∏–∑–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ\r\n    return avgSpeed < this.targetFPS * 0.7;\r\n  }\r\n\r\n  suggestOptimizations(currentSettings) {\r\n    const suggestions = [];\r\n\r\n    if (this.shouldAdjustQuality()) {\r\n      // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–Ω–∏–∑–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ\r\n      if (currentSettings.resolution === \"1920x1080\") {\r\n        suggestions.push({\r\n          type: 'resolution',\r\n          current: '1920x1080',\r\n          suggested: '1280x720',\r\n          impact: '–£—Å–∫–æ—Ä–µ–Ω–∏–µ –≤ 2-3 —Ä–∞–∑–∞'\r\n        });\r\n      } else if (currentSettings.resolution === \"1280x720\") {\r\n        suggestions.push({\r\n          type: 'resolution',\r\n          current: '1280x720',\r\n          suggested: '640x480',\r\n          impact: '–£—Å–∫–æ—Ä–µ–Ω–∏–µ –≤ 1.5-2 —Ä–∞–∑–∞'\r\n        });\r\n      }\r\n\r\n      // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–Ω–∏–∑–∏—Ç—å FPS\r\n      if (currentSettings.fps > 24) {\r\n        suggestions.push({\r\n          type: 'fps',\r\n          current: currentSettings.fps,\r\n          suggested: Math.max(24, currentSettings.fps - 6),\r\n          impact: '–£—Å–∫–æ—Ä–µ–Ω–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å–Ω–∏–∂–µ–Ω–∏—é FPS'\r\n        });\r\n      }\r\n\r\n      // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤\r\n      if (currentSettings.workerCount < navigator.hardwareConcurrency) {\r\n        suggestions.push({\r\n          type: 'workers',\r\n          current: currentSettings.workerCount,\r\n          suggested: Math.min(currentSettings.workerCount + 1, navigator.hardwareConcurrency),\r\n          impact: '–£—Å–∫–æ—Ä–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —è–¥–µ—Ä'\r\n        });\r\n      }\r\n    }\r\n\r\n    return suggestions;\r\n  }\r\n}\r\n\r\nexport class MemoryManager {\r\n  constructor() {\r\n    this.memoryLimit = this.getMemoryLimit();\r\n    this.cacheSize = 0;\r\n    this.cleanupCallbacks = [];\r\n  }\r\n\r\n  getMemoryLimit() {\r\n    if (performance.memory) {\r\n      // –ò—Å–ø–æ–ª—å–∑—É–µ–º 80% –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø–∞–º—è—Ç–∏\r\n      return Math.floor(performance.memory.jsHeapSizeLimit * 0.8);\r\n    }\r\n    \r\n    // –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤\r\n    return 512 * 1024 * 1024; // 512MB\r\n  }\r\n\r\n  getCurrentMemoryUsage() {\r\n    if (performance.memory) {\r\n      return performance.memory.usedJSHeapSize;\r\n    }\r\n    return this.cacheSize; // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞\r\n  }\r\n\r\n  isMemoryLimitReached() {\r\n    return this.getCurrentMemoryUsage() > this.memoryLimit;\r\n  }\r\n\r\n  registerCleanupCallback(callback) {\r\n    this.cleanupCallbacks.push(callback);\r\n  }\r\n\r\n  async cleanup() {\r\n    console.log('üßπ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏...');\r\n    \r\n    for (const callback of this.cleanupCallbacks) {\r\n      try {\r\n        await callback();\r\n      } catch (error) {\r\n        console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', error);\r\n      }\r\n    }\r\n\r\n    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)\r\n    if (window.gc) {\r\n      window.gc();\r\n    }\r\n\r\n    this.cacheSize = 0;\r\n  }\r\n\r\n  addToCache(size) {\r\n    this.cacheSize += size;\r\n  }\r\n\r\n  removeFromCache(size) {\r\n    this.cacheSize = Math.max(0, this.cacheSize - size);\r\n  }\r\n}\r\n\r\nexport class BatchOptimizer {\r\n  static calculateOptimalBatchSize(totalFrames, workerCount, memoryLimit) {\r\n    // –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞\r\n    let batchSize = Math.ceil(totalFrames / (workerCount * 4));\r\n\r\n    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ –ø–∞–º—è—Ç–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ 1MB –Ω–∞ –∫–∞–¥—Ä)\r\n    const memoryPerFrame = 1024 * 1024; // 1MB\r\n    const maxBatchSizeByMemory = Math.floor(memoryLimit / (workerCount * memoryPerFrame));\r\n    \r\n    batchSize = Math.min(batchSize, maxBatchSizeByMemory);\r\n\r\n    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º—É–º–æ–º –∏ –º–∞–∫—Å–∏–º—É–º–æ–º\r\n    return Math.max(10, Math.min(batchSize, 200));\r\n  }\r\n\r\n  static createOptimalBatches(totalFrames, workerCount, batchSize) {\r\n    const batches = [];\r\n    \r\n    for (let i = 0; i < totalFrames; i += batchSize) {\r\n      batches.push({\r\n        startFrame: i,\r\n        endFrame: Math.min(i + batchSize, totalFrames),\r\n        workerId: batches.length % workerCount,\r\n        priority: i === 0 ? 'high' : 'normal' // –ü–µ—Ä–≤—ã–π –±–∞—Ç—á —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º\r\n      });\r\n    }\r\n\r\n    return batches;\r\n  }\r\n\r\n  static rebalanceBatches(batches, workerStats) {\r\n    // –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞—Ç—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–æ—Ä–∫–µ—Ä–æ–≤\r\n    const sortedWorkers = Object.entries(workerStats)\r\n      .sort(([,a], [,b]) => b.performance - a.performance);\r\n\r\n    let batchIndex = 0;\r\n    for (const batch of batches) {\r\n      if (batch.status === 'pending') {\r\n        const workerIndex = batchIndex % sortedWorkers.length;\r\n        batch.workerId = parseInt(sortedWorkers[workerIndex][0]);\r\n        batchIndex++;\r\n      }\r\n    }\r\n\r\n    return batches;\r\n  }\r\n}\r\n\r\nexport class ExportPresetManager {\r\n  static presets = {\r\n    'ultrafast': {\r\n      name: '–£–ª—å—Ç—Ä–∞ –±—ã—Å—Ç—Ä—ã–π',\r\n      resolution: '640x480',\r\n      fps: 24,\r\n      workerCount: Math.min(navigator.hardwareConcurrency || 2, 6),\r\n      batchSize: 100,\r\n      parallelEncoding: true,\r\n      compatibilityMode: 'baseline',\r\n      description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å, –±–∞–∑–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ'\r\n    },\r\n    'fast': {\r\n      name: '–ë—ã—Å—Ç—Ä—ã–π',\r\n      resolution: '1280x720',\r\n      fps: 30,\r\n      workerCount: Math.min(navigator.hardwareConcurrency || 2, 4),\r\n      batchSize: 50,\r\n      parallelEncoding: true,\r\n      compatibilityMode: 'standard',\r\n      description: '–•–æ—Ä–æ—à–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å, —Å—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ'\r\n    },\r\n    'balanced': {\r\n      name: '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π',\r\n      resolution: '1280x720',\r\n      fps: 30,\r\n      workerCount: Math.min(navigator.hardwareConcurrency || 2, 3),\r\n      batchSize: 25,\r\n      parallelEncoding: false,\r\n      compatibilityMode: 'standard',\r\n      description: '–ë–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞'\r\n    },\r\n    'quality': {\r\n      name: '–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ',\r\n      resolution: '1920x1080',\r\n      fps: 30,\r\n      workerCount: 2,\r\n      batchSize: 20,\r\n      parallelEncoding: false,\r\n      compatibilityMode: 'standard',\r\n      description: '–õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Å—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å'\r\n    },\r\n    'mobile': {\r\n      name: '–î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö',\r\n      resolution: '640x480',\r\n      fps: 24,\r\n      workerCount: 2,\r\n      batchSize: 30,\r\n      parallelEncoding: true,\r\n      compatibilityMode: 'baseline',\r\n      description: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Å–ª–∞–±—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤'\r\n    }\r\n  };\r\n\r\n  static getRecommendedPreset() {\r\n    const cores = navigator.hardwareConcurrency || 2;\r\n    const memory = performance.memory?.jsHeapSizeLimit || 0;\r\n    const isMobile = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\r\n\r\n    if (isMobile || cores <= 2 || memory < 1024 * 1024 * 1024) {\r\n      return 'mobile';\r\n    } else if (cores >= 8 && memory > 4 * 1024 * 1024 * 1024) {\r\n      return 'ultrafast';\r\n    } else if (cores >= 4) {\r\n      return 'fast';\r\n    } else {\r\n      return 'balanced';\r\n    }\r\n  }\r\n\r\n  static applyPreset(presetName, currentSettings) {\r\n    const preset = this.presets[presetName];\r\n    if (!preset) return currentSettings;\r\n\r\n    return {\r\n      ...currentSettings,\r\n      ...preset,\r\n      filename: currentSettings.filename // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞\r\n    };\r\n  }\r\n}\r\n\r\nexport class RenderingPipeline {\r\n  constructor(workerManager) {\r\n    this.workerManager = workerManager;\r\n    this.performanceMonitor = new PerformanceMonitor();\r\n    this.memoryManager = new MemoryManager();\r\n    this.qualityManager = new AdaptiveQualityManager();\r\n    this.isRunning = false;\r\n  }\r\n\r\n  async initialize(settings) {\r\n    this.performanceMonitor.start();\r\n    \r\n    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–ª–±—ç–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏\r\n    this.memoryManager.registerCleanupCallback(async () => {\r\n      await this.workerManager.cleanup();\r\n    });\r\n\r\n    await this.workerManager.initialize(settings);\r\n  }\r\n\r\n  async renderWithAdaptiveQuality(timelineItems, totalFrames, fps, onProgress) {\r\n    this.isRunning = true;\r\n    \r\n    try {\r\n      // –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –±–∞—Ç—á–∏\r\n      const batchSize = BatchOptimizer.calculateOptimalBatchSize(\r\n        totalFrames,\r\n        this.workerManager.workerCount,\r\n        this.memoryManager.memoryLimit\r\n      );\r\n\r\n      const batches = BatchOptimizer.createOptimalBatches(\r\n        totalFrames,\r\n        this.workerManager.workerCount,\r\n        batchSize\r\n      );\r\n\r\n      console.log(`üé¨ –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º: ${batches.length} –±–∞—Ç—á–µ–π`);\r\n\r\n      const results = [];\r\n      let processedFrames = 0;\r\n\r\n      for (const batch of batches) {\r\n        if (!this.isRunning) break;\r\n\r\n        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π\r\n        if (this.memoryManager.isMemoryLimitReached()) {\r\n          console.warn('‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–∞–º—è—Ç–∏, –æ—á–∏—Å—Ç–∫–∞...');\r\n          await this.memoryManager.cleanup();\r\n        }\r\n\r\n        const batchStartTime = Date.now();\r\n        \r\n        try {\r\n          const batchResults = await this.workerManager.renderBatch(\r\n            batch.workerId,\r\n            batch,\r\n            timelineItems,\r\n            fps\r\n          );\r\n\r\n          results.push(...batchResults);\r\n          processedFrames += batchResults.length;\r\n\r\n          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\r\n          const batchTime = Date.now() - batchStartTime;\r\n          this.performanceMonitor.recordFrame(processedFrames, batchTime);\r\n          this.performanceMonitor.recordMemory();\r\n\r\n          // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å\r\n          if (onProgress) {\r\n            const progress = (processedFrames / totalFrames) * 100;\r\n            const stats = {\r\n              framesRendered: processedFrames,\r\n              renderingSpeed: this.performanceMonitor.getAverageRenderingSpeed(),\r\n              estimatedTimeRemaining: this.performanceMonitor.getEstimatedTimeRemaining(totalFrames),\r\n              memoryUsage: this.performanceMonitor.getMemoryUsage()\r\n            };\r\n            \r\n            onProgress(progress, stats);\r\n          }\r\n\r\n          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ\r\n          this.qualityManager.updatePerformance({\r\n            renderingSpeed: batchResults.length / (batchTime / 1000),\r\n            memoryUsage: this.memoryManager.getCurrentMemoryUsage(),\r\n            batchSize: batchResults.length\r\n          });\r\n\r\n        } catch (error) {\r\n          console.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –±–∞—Ç—á–∞:`, error);\r\n          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –±–∞—Ç—á–∞–º–∏\r\n        }\r\n      }\r\n\r\n      return results;\r\n\r\n    } finally {\r\n      this.isRunning = false;\r\n    }\r\n  }\r\n\r\n  stop() {\r\n    this.isRunning = false;\r\n  }\r\n\r\n  getPerformanceReport() {\r\n    return this.performanceMonitor.generateReport();\r\n  }\r\n\r\n  getOptimizationSuggestions(currentSettings) {\r\n    return this.qualityManager.suggestOptimizations(currentSettings);\r\n  }\r\n}\r\n\r\n// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\r\nexport class DeviceCapabilities {\r\n  static detect() {\r\n    const cores = navigator.hardwareConcurrency || 2;\r\n    const memory = performance.memory?.jsHeapSizeLimit || 0;\r\n    const isMobile = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\r\n    \r\n    // –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤\r\n    let deviceClass = 'low';\r\n    \r\n    if (!isMobile && cores >= 8 && memory > 4 * 1024 * 1024 * 1024) {\r\n      deviceClass = 'high';\r\n    } else if (!isMobile && cores >= 4 && memory > 2 * 1024 * 1024 * 1024) {\r\n      deviceClass = 'medium';\r\n    } else if (cores >= 4) {\r\n      deviceClass = 'medium-mobile';\r\n    }\r\n\r\n    return {\r\n      cores,\r\n      memory,\r\n      isMobile,\r\n      deviceClass,\r\n      webgl: !!window.WebGLRenderingContext,\r\n      webgl2: !!window.WebGL2RenderingContext,\r\n      offscreenCanvas: typeof OffscreenCanvas !== 'undefined',\r\n      sharedArrayBuffer: typeof SharedArrayBuffer !== 'undefined'\r\n    };\r\n  }\r\n\r\n  static getRecommendedSettings() {\r\n    const capabilities = this.detect();\r\n    \r\n    const settings = {\r\n      low: {\r\n        maxWorkers: 2,\r\n        maxResolution: '640x480',\r\n        maxFPS: 24,\r\n        batchSize: 20\r\n      },\r\n      'medium-mobile': {\r\n        maxWorkers: 2,\r\n        maxResolution: '1280x720',\r\n        maxFPS: 30,\r\n        batchSize: 30\r\n      },\r\n      medium: {\r\n        maxWorkers: 4,\r\n        maxResolution: '1280x720',\r\n        maxFPS: 30,\r\n        batchSize: 50\r\n      },\r\n      high: {\r\n        maxWorkers: 8,\r\n        maxResolution: '1920x1080',\r\n        maxFPS: 60,\r\n        batchSize: 100\r\n      }\r\n    };\r\n\r\n    return settings[capabilities.deviceClass] || settings.low;\r\n  }\r\n}\r\n\r\nexport default {\r\n  PerformanceMonitor,\r\n  AdaptiveQualityManager,\r\n  MemoryManager,\r\n  BatchOptimizer,\r\n  ExportPresetManager,\r\n  RenderingPipeline,\r\n  DeviceCapabilities\r\n};"],"mappings":"AAAA;;AAEA,OAAO,MAAMA,kBAAkB,CAAC;EAC9BC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,SAAS,GAAG,IAAI;IACrB,IAAI,CAACC,WAAW,GAAG,EAAE;IACrB,IAAI,CAACC,eAAe,GAAG,EAAE;IACzB,IAAI,CAACC,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC;EAC9B;EAEAC,KAAKA,CAAA,EAAG;IACN,IAAI,CAACL,SAAS,GAAGM,IAAI,CAACC,GAAG,CAAC,CAAC;IAC3B,IAAI,CAACN,WAAW,GAAG,EAAE;IACrB,IAAI,CAACC,eAAe,GAAG,EAAE;IACzB,IAAI,CAACC,WAAW,CAACK,KAAK,CAAC,CAAC;EAC1B;EAEAC,WAAWA,CAACC,UAAU,EAAEC,UAAU,EAAE;IAClC,IAAI,CAACV,WAAW,CAACW,IAAI,CAAC;MACpBC,KAAK,EAAEH,UAAU;MACjBI,IAAI,EAAEH,UAAU;MAChBI,SAAS,EAAET,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAACP;IAC/B,CAAC,CAAC;EACJ;EAEAgB,YAAYA,CAAA,EAAG;IACb,IAAIC,WAAW,CAACC,MAAM,EAAE;MACtB,IAAI,CAAChB,eAAe,CAACU,IAAI,CAAC;QACxBO,IAAI,EAAEF,WAAW,CAACC,MAAM,CAACE,cAAc;QACvCC,KAAK,EAAEJ,WAAW,CAACC,MAAM,CAACI,eAAe;QACzCC,KAAK,EAAEN,WAAW,CAACC,MAAM,CAACM,eAAe;QACzCT,SAAS,EAAET,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAACP;MAC/B,CAAC,CAAC;IACJ;EACF;EAEAyB,iBAAiBA,CAACC,QAAQ,EAAEC,KAAK,EAAE;IACjC,IAAI,CAACxB,WAAW,CAACyB,GAAG,CAACF,QAAQ,EAAE;MAC7B,GAAGC,KAAK;MACRZ,SAAS,EAAET,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAACP;IAC/B,CAAC,CAAC;EACJ;EAEA6B,wBAAwBA,CAAA,EAAG;IACzB,IAAI,IAAI,CAAC5B,WAAW,CAAC6B,MAAM,GAAG,CAAC,EAAE,OAAO,CAAC;IAEzC,MAAMC,SAAS,GAAG,CAACzB,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAACP,SAAS,IAAI,IAAI;IACtD,OAAO,IAAI,CAACC,WAAW,CAAC6B,MAAM,GAAGC,SAAS;EAC5C;EAEAC,yBAAyBA,CAACC,WAAW,EAAE;IACrC,MAAMC,KAAK,GAAG,IAAI,CAACL,wBAAwB,CAAC,CAAC;IAC7C,IAAIK,KAAK,KAAK,CAAC,EAAE,OAAO,CAAC;IAEzB,MAAMC,eAAe,GAAGF,WAAW,GAAG,IAAI,CAAChC,WAAW,CAAC6B,MAAM;IAC7D,OAAOK,eAAe,GAAGD,KAAK;EAChC;EAEAE,cAAcA,CAAA,EAAG;IACf,IAAI,IAAI,CAAClC,eAAe,CAAC4B,MAAM,KAAK,CAAC,EAAE,OAAO,CAAC;IAE/C,MAAMO,MAAM,GAAG,IAAI,CAACnC,eAAe,CAAC,IAAI,CAACA,eAAe,CAAC4B,MAAM,GAAG,CAAC,CAAC;IACpE,OAAOQ,IAAI,CAACC,KAAK,CAACF,MAAM,CAAClB,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC;EAChD;EAEAqB,cAAcA,CAAA,EAAG;IACf,MAAMT,SAAS,GAAG,CAACzB,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAACP,SAAS,IAAI,IAAI;IACtD,MAAMyC,QAAQ,GAAG,IAAI,CAACZ,wBAAwB,CAAC,CAAC;IAChD,MAAMa,WAAW,GAAG,IAAI,CAACN,cAAc,CAAC,CAAC;IAEzC,OAAO;MACLL,SAAS;MACTY,cAAc,EAAE,IAAI,CAAC1C,WAAW,CAAC6B,MAAM;MACvCc,YAAY,EAAEH,QAAQ;MACtBC,WAAW;MACXG,WAAW,EAAE,IAAI,CAAC1C,WAAW,CAAC2C,IAAI;MAClCC,UAAU,EAAE,IAAI,CAACC,mBAAmB,CAAC;IACvC,CAAC;EACH;EAEAA,mBAAmBA,CAAA,EAAG;IACpB;IACA,MAAMC,gBAAgB,GAAG,IAAI,CAAC9C,WAAW,CAAC2C,IAAI,GAAG,EAAE,CAAC,CAAC;IACrD,MAAMI,WAAW,GAAG,IAAI,CAACrB,wBAAwB,CAAC,CAAC;IACnD,OAAOS,IAAI,CAACa,GAAG,CAAED,WAAW,GAAGD,gBAAgB,GAAI,GAAG,EAAE,GAAG,CAAC;EAC9D;AACF;AAEA,OAAO,MAAMG,sBAAsB,CAAC;EAClCrD,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACsD,kBAAkB,GAAG,EAAE;IAC5B,IAAI,CAACC,eAAe,GAAG,IAAI;IAC3B,IAAI,CAACC,SAAS,GAAG,EAAE,CAAC,CAAC;EACvB;EAEAC,iBAAiBA,CAAC7B,KAAK,EAAE;IACvB,IAAI,CAAC0B,kBAAkB,CAACzC,IAAI,CAAC;MAC3B,GAAGe,KAAK;MACRZ,SAAS,EAAET,IAAI,CAACC,GAAG,CAAC;IACtB,CAAC,CAAC;;IAEF;IACA,IAAI,IAAI,CAAC8C,kBAAkB,CAACvB,MAAM,GAAG,EAAE,EAAE;MACvC,IAAI,CAACuB,kBAAkB,CAACI,KAAK,CAAC,CAAC;IACjC;EACF;EAEAC,mBAAmBA,CAAA,EAAG;IACpB,IAAI,IAAI,CAACL,kBAAkB,CAACvB,MAAM,GAAG,CAAC,EAAE,OAAO,KAAK;IAEpD,MAAM6B,MAAM,GAAG,IAAI,CAACN,kBAAkB,CAACO,KAAK,CAAC,CAAC,CAAC,CAAC;IAChD,MAAMnB,QAAQ,GAAGkB,MAAM,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAACC,cAAc,EAAE,CAAC,CAAC,GAAGL,MAAM,CAAC7B,MAAM;;IAE3F;IACA,OAAOW,QAAQ,GAAG,IAAI,CAACc,SAAS,GAAG,GAAG;EACxC;EAEAU,oBAAoBA,CAACX,eAAe,EAAE;IACpC,MAAMY,WAAW,GAAG,EAAE;IAEtB,IAAI,IAAI,CAACR,mBAAmB,CAAC,CAAC,EAAE;MAC9B;MACA,IAAIJ,eAAe,CAACa,UAAU,KAAK,WAAW,EAAE;QAC9CD,WAAW,CAACtD,IAAI,CAAC;UACfwD,IAAI,EAAE,YAAY;UAClBC,OAAO,EAAE,WAAW;UACpBC,SAAS,EAAE,UAAU;UACrBC,MAAM,EAAE;QACV,CAAC,CAAC;MACJ,CAAC,MAAM,IAAIjB,eAAe,CAACa,UAAU,KAAK,UAAU,EAAE;QACpDD,WAAW,CAACtD,IAAI,CAAC;UACfwD,IAAI,EAAE,YAAY;UAClBC,OAAO,EAAE,UAAU;UACnBC,SAAS,EAAE,SAAS;UACpBC,MAAM,EAAE;QACV,CAAC,CAAC;MACJ;;MAEA;MACA,IAAIjB,eAAe,CAACkB,GAAG,GAAG,EAAE,EAAE;QAC5BN,WAAW,CAACtD,IAAI,CAAC;UACfwD,IAAI,EAAE,KAAK;UACXC,OAAO,EAAEf,eAAe,CAACkB,GAAG;UAC5BF,SAAS,EAAEhC,IAAI,CAACmC,GAAG,CAAC,EAAE,EAAEnB,eAAe,CAACkB,GAAG,GAAG,CAAC,CAAC;UAChDD,MAAM,EAAE;QACV,CAAC,CAAC;MACJ;;MAEA;MACA,IAAIjB,eAAe,CAACT,WAAW,GAAG6B,SAAS,CAACC,mBAAmB,EAAE;QAC/DT,WAAW,CAACtD,IAAI,CAAC;UACfwD,IAAI,EAAE,SAAS;UACfC,OAAO,EAAEf,eAAe,CAACT,WAAW;UACpCyB,SAAS,EAAEhC,IAAI,CAACa,GAAG,CAACG,eAAe,CAACT,WAAW,GAAG,CAAC,EAAE6B,SAAS,CAACC,mBAAmB,CAAC;UACnFJ,MAAM,EAAE;QACV,CAAC,CAAC;MACJ;IACF;IAEA,OAAOL,WAAW;EACpB;AACF;AAEA,OAAO,MAAMU,aAAa,CAAC;EACzB7E,WAAWA,CAAA,EAAG;IACZ,IAAI,CAAC8E,WAAW,GAAG,IAAI,CAACC,cAAc,CAAC,CAAC;IACxC,IAAI,CAACC,SAAS,GAAG,CAAC;IAClB,IAAI,CAACC,gBAAgB,GAAG,EAAE;EAC5B;EAEAF,cAAcA,CAAA,EAAG;IACf,IAAI7D,WAAW,CAACC,MAAM,EAAE;MACtB;MACA,OAAOoB,IAAI,CAAC2C,KAAK,CAAChE,WAAW,CAACC,MAAM,CAACM,eAAe,GAAG,GAAG,CAAC;IAC7D;;IAEA;IACA,OAAO,GAAG,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;EAC5B;EAEA0D,qBAAqBA,CAAA,EAAG;IACtB,IAAIjE,WAAW,CAACC,MAAM,EAAE;MACtB,OAAOD,WAAW,CAACC,MAAM,CAACE,cAAc;IAC1C;IACA,OAAO,IAAI,CAAC2D,SAAS,CAAC,CAAC;EACzB;EAEAI,oBAAoBA,CAAA,EAAG;IACrB,OAAO,IAAI,CAACD,qBAAqB,CAAC,CAAC,GAAG,IAAI,CAACL,WAAW;EACxD;EAEAO,uBAAuBA,CAACC,QAAQ,EAAE;IAChC,IAAI,CAACL,gBAAgB,CAACpE,IAAI,CAACyE,QAAQ,CAAC;EACtC;EAEA,MAAMC,OAAOA,CAAA,EAAG;IACdC,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;IAElD,KAAK,MAAMH,QAAQ,IAAI,IAAI,CAACL,gBAAgB,EAAE;MAC5C,IAAI;QACF,MAAMK,QAAQ,CAAC,CAAC;MAClB,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdF,OAAO,CAACG,IAAI,CAAC,qBAAqB,EAAED,KAAK,CAAC;MAC5C;IACF;;IAEA;IACA,IAAIE,MAAM,CAACC,EAAE,EAAE;MACbD,MAAM,CAACC,EAAE,CAAC,CAAC;IACb;IAEA,IAAI,CAACb,SAAS,GAAG,CAAC;EACpB;EAEAc,UAAUA,CAAC/C,IAAI,EAAE;IACf,IAAI,CAACiC,SAAS,IAAIjC,IAAI;EACxB;EAEAgD,eAAeA,CAAChD,IAAI,EAAE;IACpB,IAAI,CAACiC,SAAS,GAAGzC,IAAI,CAACmC,GAAG,CAAC,CAAC,EAAE,IAAI,CAACM,SAAS,GAAGjC,IAAI,CAAC;EACrD;AACF;AAEA,OAAO,MAAMiD,cAAc,CAAC;EAC1B,OAAOC,yBAAyBA,CAAC/D,WAAW,EAAEY,WAAW,EAAEgC,WAAW,EAAE;IACtE;IACA,IAAIoB,SAAS,GAAG3D,IAAI,CAAC4D,IAAI,CAACjE,WAAW,IAAIY,WAAW,GAAG,CAAC,CAAC,CAAC;;IAE1D;IACA,MAAMsD,cAAc,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;IACpC,MAAMC,oBAAoB,GAAG9D,IAAI,CAAC2C,KAAK,CAACJ,WAAW,IAAIhC,WAAW,GAAGsD,cAAc,CAAC,CAAC;IAErFF,SAAS,GAAG3D,IAAI,CAACa,GAAG,CAAC8C,SAAS,EAAEG,oBAAoB,CAAC;;IAErD;IACA,OAAO9D,IAAI,CAACmC,GAAG,CAAC,EAAE,EAAEnC,IAAI,CAACa,GAAG,CAAC8C,SAAS,EAAE,GAAG,CAAC,CAAC;EAC/C;EAEA,OAAOI,oBAAoBA,CAACpE,WAAW,EAAEY,WAAW,EAAEoD,SAAS,EAAE;IAC/D,MAAMK,OAAO,GAAG,EAAE;IAElB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGtE,WAAW,EAAEsE,CAAC,IAAIN,SAAS,EAAE;MAC/CK,OAAO,CAAC1F,IAAI,CAAC;QACX4F,UAAU,EAAED,CAAC;QACbE,QAAQ,EAAEnE,IAAI,CAACa,GAAG,CAACoD,CAAC,GAAGN,SAAS,EAAEhE,WAAW,CAAC;QAC9CP,QAAQ,EAAE4E,OAAO,CAACxE,MAAM,GAAGe,WAAW;QACtC6D,QAAQ,EAAEH,CAAC,KAAK,CAAC,GAAG,MAAM,GAAG,QAAQ,CAAC;MACxC,CAAC,CAAC;IACJ;IAEA,OAAOD,OAAO;EAChB;EAEA,OAAOK,gBAAgBA,CAACL,OAAO,EAAEnG,WAAW,EAAE;IAC5C;IACA,MAAMyG,aAAa,GAAGC,MAAM,CAACC,OAAO,CAAC3G,WAAW,CAAC,CAC9C4G,IAAI,CAAC,CAAC,GAAEC,CAAC,CAAC,EAAE,GAAEC,CAAC,CAAC,KAAKA,CAAC,CAAChG,WAAW,GAAG+F,CAAC,CAAC/F,WAAW,CAAC;IAEtD,IAAIiG,UAAU,GAAG,CAAC;IAClB,KAAK,MAAMC,KAAK,IAAIb,OAAO,EAAE;MAC3B,IAAIa,KAAK,CAACC,MAAM,KAAK,SAAS,EAAE;QAC9B,MAAMC,WAAW,GAAGH,UAAU,GAAGN,aAAa,CAAC9E,MAAM;QACrDqF,KAAK,CAACzF,QAAQ,GAAG4F,QAAQ,CAACV,aAAa,CAACS,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;QACxDH,UAAU,EAAE;MACd;IACF;IAEA,OAAOZ,OAAO;EAChB;AACF;AAEA,OAAO,MAAMiB,mBAAmB,CAAC;EAsD/B,OAAOC,oBAAoBA,CAAA,EAAG;IAAA,IAAAC,mBAAA;IAC5B,MAAMC,KAAK,GAAGhD,SAAS,CAACC,mBAAmB,IAAI,CAAC;IAChD,MAAMzD,MAAM,GAAG,EAAAuG,mBAAA,GAAAxG,WAAW,CAACC,MAAM,cAAAuG,mBAAA,uBAAlBA,mBAAA,CAAoBjG,eAAe,KAAI,CAAC;IACvD,MAAMmG,QAAQ,GAAG,0DAA0D,CAACC,IAAI,CAAClD,SAAS,CAACmD,SAAS,CAAC;IAErG,IAAIF,QAAQ,IAAID,KAAK,IAAI,CAAC,IAAIxG,MAAM,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,EAAE;MACzD,OAAO,QAAQ;IACjB,CAAC,MAAM,IAAIwG,KAAK,IAAI,CAAC,IAAIxG,MAAM,GAAG,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,EAAE;MACxD,OAAO,WAAW;IACpB,CAAC,MAAM,IAAIwG,KAAK,IAAI,CAAC,EAAE;MACrB,OAAO,MAAM;IACf,CAAC,MAAM;MACL,OAAO,UAAU;IACnB;EACF;EAEA,OAAOI,WAAWA,CAACC,UAAU,EAAEzE,eAAe,EAAE;IAC9C,MAAM0E,MAAM,GAAG,IAAI,CAACC,OAAO,CAACF,UAAU,CAAC;IACvC,IAAI,CAACC,MAAM,EAAE,OAAO1E,eAAe;IAEnC,OAAO;MACL,GAAGA,eAAe;MAClB,GAAG0E,MAAM;MACTE,QAAQ,EAAE5E,eAAe,CAAC4E,QAAQ,CAAC;IACrC,CAAC;EACH;AACF;AAhFaX,mBAAmB,CACvBU,OAAO,GAAG;EACf,WAAW,EAAE;IACXE,IAAI,EAAE,gBAAgB;IACtBhE,UAAU,EAAE,SAAS;IACrBK,GAAG,EAAE,EAAE;IACP3B,WAAW,EAAEP,IAAI,CAACa,GAAG,CAACuB,SAAS,CAACC,mBAAmB,IAAI,CAAC,EAAE,CAAC,CAAC;IAC5DsB,SAAS,EAAE,GAAG;IACdmC,gBAAgB,EAAE,IAAI;IACtBC,iBAAiB,EAAE,UAAU;IAC7BC,WAAW,EAAE;EACf,CAAC;EACD,MAAM,EAAE;IACNH,IAAI,EAAE,SAAS;IACfhE,UAAU,EAAE,UAAU;IACtBK,GAAG,EAAE,EAAE;IACP3B,WAAW,EAAEP,IAAI,CAACa,GAAG,CAACuB,SAAS,CAACC,mBAAmB,IAAI,CAAC,EAAE,CAAC,CAAC;IAC5DsB,SAAS,EAAE,EAAE;IACbmC,gBAAgB,EAAE,IAAI;IACtBC,iBAAiB,EAAE,UAAU;IAC7BC,WAAW,EAAE;EACf,CAAC;EACD,UAAU,EAAE;IACVH,IAAI,EAAE,kBAAkB;IACxBhE,UAAU,EAAE,UAAU;IACtBK,GAAG,EAAE,EAAE;IACP3B,WAAW,EAAEP,IAAI,CAACa,GAAG,CAACuB,SAAS,CAACC,mBAAmB,IAAI,CAAC,EAAE,CAAC,CAAC;IAC5DsB,SAAS,EAAE,EAAE;IACbmC,gBAAgB,EAAE,KAAK;IACvBC,iBAAiB,EAAE,UAAU;IAC7BC,WAAW,EAAE;EACf,CAAC;EACD,SAAS,EAAE;IACTH,IAAI,EAAE,kBAAkB;IACxBhE,UAAU,EAAE,WAAW;IACvBK,GAAG,EAAE,EAAE;IACP3B,WAAW,EAAE,CAAC;IACdoD,SAAS,EAAE,EAAE;IACbmC,gBAAgB,EAAE,KAAK;IACvBC,iBAAiB,EAAE,UAAU;IAC7BC,WAAW,EAAE;EACf,CAAC;EACD,QAAQ,EAAE;IACRH,IAAI,EAAE,eAAe;IACrBhE,UAAU,EAAE,SAAS;IACrBK,GAAG,EAAE,EAAE;IACP3B,WAAW,EAAE,CAAC;IACdoD,SAAS,EAAE,EAAE;IACbmC,gBAAgB,EAAE,IAAI;IACtBC,iBAAiB,EAAE,UAAU;IAC7BC,WAAW,EAAE;EACf;AACF,CAAC;AA8BH,OAAO,MAAMC,iBAAiB,CAAC;EAC7BxI,WAAWA,CAACyI,aAAa,EAAE;IACzB,IAAI,CAACA,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACC,kBAAkB,GAAG,IAAI3I,kBAAkB,CAAC,CAAC;IAClD,IAAI,CAAC4I,aAAa,GAAG,IAAI9D,aAAa,CAAC,CAAC;IACxC,IAAI,CAAC+D,cAAc,GAAG,IAAIvF,sBAAsB,CAAC,CAAC;IAClD,IAAI,CAACwF,SAAS,GAAG,KAAK;EACxB;EAEA,MAAMC,UAAUA,CAACC,QAAQ,EAAE;IACzB,IAAI,CAACL,kBAAkB,CAACpI,KAAK,CAAC,CAAC;;IAE/B;IACA,IAAI,CAACqI,aAAa,CAACtD,uBAAuB,CAAC,YAAY;MACrD,MAAM,IAAI,CAACoD,aAAa,CAAClD,OAAO,CAAC,CAAC;IACpC,CAAC,CAAC;IAEF,MAAM,IAAI,CAACkD,aAAa,CAACK,UAAU,CAACC,QAAQ,CAAC;EAC/C;EAEA,MAAMC,yBAAyBA,CAACC,aAAa,EAAE/G,WAAW,EAAEuC,GAAG,EAAEyE,UAAU,EAAE;IAC3E,IAAI,CAACL,SAAS,GAAG,IAAI;IAErB,IAAI;MACF;MACA,MAAM3C,SAAS,GAAGF,cAAc,CAACC,yBAAyB,CACxD/D,WAAW,EACX,IAAI,CAACuG,aAAa,CAAC3F,WAAW,EAC9B,IAAI,CAAC6F,aAAa,CAAC7D,WACrB,CAAC;MAED,MAAMyB,OAAO,GAAGP,cAAc,CAACM,oBAAoB,CACjDpE,WAAW,EACX,IAAI,CAACuG,aAAa,CAAC3F,WAAW,EAC9BoD,SACF,CAAC;MAEDV,OAAO,CAACC,GAAG,CAAC,wCAAwCc,OAAO,CAACxE,MAAM,SAAS,CAAC;MAE5E,MAAMoH,OAAO,GAAG,EAAE;MAClB,IAAIC,eAAe,GAAG,CAAC;MAEvB,KAAK,MAAMhC,KAAK,IAAIb,OAAO,EAAE;QAC3B,IAAI,CAAC,IAAI,CAACsC,SAAS,EAAE;;QAErB;QACA,IAAI,IAAI,CAACF,aAAa,CAACvD,oBAAoB,CAAC,CAAC,EAAE;UAC7CI,OAAO,CAACG,IAAI,CAAC,uCAAuC,CAAC;UACrD,MAAM,IAAI,CAACgD,aAAa,CAACpD,OAAO,CAAC,CAAC;QACpC;QAEA,MAAM8D,cAAc,GAAG9I,IAAI,CAACC,GAAG,CAAC,CAAC;QAEjC,IAAI;UACF,MAAM8I,YAAY,GAAG,MAAM,IAAI,CAACb,aAAa,CAACc,WAAW,CACvDnC,KAAK,CAACzF,QAAQ,EACdyF,KAAK,EACL6B,aAAa,EACbxE,GACF,CAAC;UAED0E,OAAO,CAACtI,IAAI,CAAC,GAAGyI,YAAY,CAAC;UAC7BF,eAAe,IAAIE,YAAY,CAACvH,MAAM;;UAEtC;UACA,MAAMyH,SAAS,GAAGjJ,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG6I,cAAc;UAC7C,IAAI,CAACX,kBAAkB,CAAChI,WAAW,CAAC0I,eAAe,EAAEI,SAAS,CAAC;UAC/D,IAAI,CAACd,kBAAkB,CAACzH,YAAY,CAAC,CAAC;;UAEtC;UACA,IAAIiI,UAAU,EAAE;YACd,MAAMO,QAAQ,GAAIL,eAAe,GAAGlH,WAAW,GAAI,GAAG;YACtD,MAAMN,KAAK,GAAG;cACZgB,cAAc,EAAEwG,eAAe;cAC/BnF,cAAc,EAAE,IAAI,CAACyE,kBAAkB,CAAC5G,wBAAwB,CAAC,CAAC;cAClE4H,sBAAsB,EAAE,IAAI,CAAChB,kBAAkB,CAACzG,yBAAyB,CAACC,WAAW,CAAC;cACtFS,WAAW,EAAE,IAAI,CAAC+F,kBAAkB,CAACrG,cAAc,CAAC;YACtD,CAAC;YAED6G,UAAU,CAACO,QAAQ,EAAE7H,KAAK,CAAC;UAC7B;;UAEA;UACA,IAAI,CAACgH,cAAc,CAACnF,iBAAiB,CAAC;YACpCQ,cAAc,EAAEqF,YAAY,CAACvH,MAAM,IAAIyH,SAAS,GAAG,IAAI,CAAC;YACxD7G,WAAW,EAAE,IAAI,CAACgG,aAAa,CAACxD,qBAAqB,CAAC,CAAC;YACvDe,SAAS,EAAEoD,YAAY,CAACvH;UAC1B,CAAC,CAAC;QAEJ,CAAC,CAAC,OAAO2D,KAAK,EAAE;UACdF,OAAO,CAACE,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;UAClD;QACF;MACF;MAEA,OAAOyD,OAAO;IAEhB,CAAC,SAAS;MACR,IAAI,CAACN,SAAS,GAAG,KAAK;IACxB;EACF;EAEAc,IAAIA,CAAA,EAAG;IACL,IAAI,CAACd,SAAS,GAAG,KAAK;EACxB;EAEAe,oBAAoBA,CAAA,EAAG;IACrB,OAAO,IAAI,CAAClB,kBAAkB,CAACjG,cAAc,CAAC,CAAC;EACjD;EAEAoH,0BAA0BA,CAACtG,eAAe,EAAE;IAC1C,OAAO,IAAI,CAACqF,cAAc,CAAC1E,oBAAoB,CAACX,eAAe,CAAC;EAClE;AACF;;AAEA;AACA,OAAO,MAAMuG,kBAAkB,CAAC;EAC9B,OAAOC,MAAMA,CAAA,EAAG;IAAA,IAAAC,oBAAA;IACd,MAAMrC,KAAK,GAAGhD,SAAS,CAACC,mBAAmB,IAAI,CAAC;IAChD,MAAMzD,MAAM,GAAG,EAAA6I,oBAAA,GAAA9I,WAAW,CAACC,MAAM,cAAA6I,oBAAA,uBAAlBA,oBAAA,CAAoBvI,eAAe,KAAI,CAAC;IACvD,MAAMmG,QAAQ,GAAG,0DAA0D,CAACC,IAAI,CAAClD,SAAS,CAACmD,SAAS,CAAC;;IAErG;IACA,IAAImC,WAAW,GAAG,KAAK;IAEvB,IAAI,CAACrC,QAAQ,IAAID,KAAK,IAAI,CAAC,IAAIxG,MAAM,GAAG,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,EAAE;MAC9D8I,WAAW,GAAG,MAAM;IACtB,CAAC,MAAM,IAAI,CAACrC,QAAQ,IAAID,KAAK,IAAI,CAAC,IAAIxG,MAAM,GAAG,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,EAAE;MACrE8I,WAAW,GAAG,QAAQ;IACxB,CAAC,MAAM,IAAItC,KAAK,IAAI,CAAC,EAAE;MACrBsC,WAAW,GAAG,eAAe;IAC/B;IAEA,OAAO;MACLtC,KAAK;MACLxG,MAAM;MACNyG,QAAQ;MACRqC,WAAW;MACXC,KAAK,EAAE,CAAC,CAACtE,MAAM,CAACuE,qBAAqB;MACrCC,MAAM,EAAE,CAAC,CAACxE,MAAM,CAACyE,sBAAsB;MACvCC,eAAe,EAAE,OAAOC,eAAe,KAAK,WAAW;MACvDC,iBAAiB,EAAE,OAAOC,iBAAiB,KAAK;IAClD,CAAC;EACH;EAEA,OAAOC,sBAAsBA,CAAA,EAAG;IAC9B,MAAMC,YAAY,GAAG,IAAI,CAACZ,MAAM,CAAC,CAAC;IAElC,MAAMhB,QAAQ,GAAG;MACf6B,GAAG,EAAE;QACHC,UAAU,EAAE,CAAC;QACbC,aAAa,EAAE,SAAS;QACxBC,MAAM,EAAE,EAAE;QACV7E,SAAS,EAAE;MACb,CAAC;MACD,eAAe,EAAE;QACf2E,UAAU,EAAE,CAAC;QACbC,aAAa,EAAE,UAAU;QACzBC,MAAM,EAAE,EAAE;QACV7E,SAAS,EAAE;MACb,CAAC;MACD8E,MAAM,EAAE;QACNH,UAAU,EAAE,CAAC;QACbC,aAAa,EAAE,UAAU;QACzBC,MAAM,EAAE,EAAE;QACV7E,SAAS,EAAE;MACb,CAAC;MACD+E,IAAI,EAAE;QACJJ,UAAU,EAAE,CAAC;QACbC,aAAa,EAAE,WAAW;QAC1BC,MAAM,EAAE,EAAE;QACV7E,SAAS,EAAE;MACb;IACF,CAAC;IAED,OAAO6C,QAAQ,CAAC4B,YAAY,CAACV,WAAW,CAAC,IAAIlB,QAAQ,CAAC6B,GAAG;EAC3D;AACF;AAEA,eAAe;EACb7K,kBAAkB;EAClBsD,sBAAsB;EACtBwB,aAAa;EACbmB,cAAc;EACdwB,mBAAmB;EACnBgB,iBAAiB;EACjBsB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}