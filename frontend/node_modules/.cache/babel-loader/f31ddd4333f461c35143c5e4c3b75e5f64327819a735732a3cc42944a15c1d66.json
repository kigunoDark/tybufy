{"ast":null,"code":"var _jsxFileName = \"C:\\\\Scriptify\\\\ai-content-studio\\\\frontend\\\\src\\\\components\\\\Timeline\\\\Timeline.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useRef, useEffect, useCallback } from \"react\";\nimport { TimelineCanvas } from \"./TimelineCanvas\";\nimport { TimelineHeader } from \"./TimelineHeader\";\nimport { TrackLabels } from \"./TrackLabels\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Timeline = ({\n  timelineItems,\n  setTimelineItems,\n  currentTime,\n  videoDuration,\n  setVideoDuration,\n  selectedTimelineItem,\n  setSelectedTimelineItem,\n  timelineZoom,\n  setTimelineZoom,\n  tracks,\n  setTracks,\n  draggedItem,\n  draggedTimelineItem,\n  setDraggedTimelineItem,\n  dropPreview,\n  setDropPreview,\n  setShowExportModal,\n  isDragging,\n  isTimelineDragging,\n  setIsTimelineDragging,\n  isResizing,\n  setIsResizing,\n  copiedItem,\n  formatTime,\n  seekTo,\n  splitTimelineItem,\n  copyTimelineItem,\n  pasteTimelineItem,\n  deleteSelectedItem,\n  addToTimeline,\n  handleVolumeChange,\n  insertWithRipple,\n  onOpacityChange,\n  applyRippleEffect,\n  onSmartAddToTimeline\n}) => {\n  _s();\n  const timelineRef = useRef(null);\n  const timelineScrollRef = useRef(null);\n  const trackLabelsRef = useRef(null);\n  const autoScrollIntervalRef = useRef(null);\n  const [dragOffset, setDragOffset] = useState(0);\n  const [resizeHandle, setResizeHandle] = useState(null);\n  const [resizeItem, setResizeItem] = useState(null);\n  const [originalItemData, setOriginalItemData] = useState(null);\n  const stopAutoScroll = useCallback(() => {\n    if (autoScrollIntervalRef.current) {\n      clearInterval(autoScrollIntervalRef.current);\n      autoScrollIntervalRef.current = null;\n    }\n  }, []);\n  const startAutoScroll = useCallback((direction, speed = 1) => {\n    stopAutoScroll();\n    autoScrollIntervalRef.current = setInterval(() => {\n      if (timelineScrollRef.current) {\n        const scrollAmount = 15 * speed;\n        const currentScrollLeft = timelineScrollRef.current.scrollLeft;\n        const maxScroll = timelineScrollRef.current.scrollWidth - timelineScrollRef.current.clientWidth;\n        if (direction === \"left\" && currentScrollLeft > 0) {\n          timelineScrollRef.current.scrollLeft = Math.max(0, currentScrollLeft - scrollAmount);\n        } else if (direction === \"right\" && currentScrollLeft < maxScroll) {\n          timelineScrollRef.current.scrollLeft = Math.min(maxScroll, currentScrollLeft + scrollAmount);\n        }\n      }\n    }, 16);\n  }, [stopAutoScroll]);\n  const checkAutoScroll = useCallback(clientX => {\n    if (!timelineScrollRef.current) return;\n    const rect = timelineScrollRef.current.getBoundingClientRect();\n    const scrollZoneWidth = 120;\n    const relativeX = clientX - rect.left;\n    if (relativeX < scrollZoneWidth && timelineScrollRef.current.scrollLeft > 0) {\n      const speed = (scrollZoneWidth - relativeX) / scrollZoneWidth * 3;\n      startAutoScroll(\"left\", speed);\n    } else if (relativeX > rect.width - scrollZoneWidth) {\n      const maxScroll = timelineScrollRef.current.scrollWidth - timelineScrollRef.current.clientWidth;\n      if (timelineScrollRef.current.scrollLeft < maxScroll) {\n        const speed = (relativeX - (rect.width - scrollZoneWidth)) / scrollZoneWidth * 3;\n        startAutoScroll(\"right\", speed);\n      }\n    } else {\n      stopAutoScroll();\n    }\n  }, [startAutoScroll, stopAutoScroll]);\n  const getTargetTrackForType = useCallback(mediaType => {\n    var _tracks$main, _tracks$audio, _tracks$overlays, _tracks$main2, _tracks$main2$;\n    switch (mediaType) {\n      case \"videos\":\n        const mainTrack = (_tracks$main = tracks.main) === null || _tracks$main === void 0 ? void 0 : _tracks$main[0];\n        return mainTrack === null || mainTrack === void 0 ? void 0 : mainTrack.id;\n      case \"audios\":\n        const audioTrack = (_tracks$audio = tracks.audio) === null || _tracks$audio === void 0 ? void 0 : _tracks$audio[0];\n        return audioTrack === null || audioTrack === void 0 ? void 0 : audioTrack.id;\n      case \"images\":\n        const overlayTrack = (_tracks$overlays = tracks.overlays) === null || _tracks$overlays === void 0 ? void 0 : _tracks$overlays[0];\n        return overlayTrack === null || overlayTrack === void 0 ? void 0 : overlayTrack.id;\n      default:\n        return (_tracks$main2 = tracks.main) === null || _tracks$main2 === void 0 ? void 0 : (_tracks$main2$ = _tracks$main2[0]) === null || _tracks$main2$ === void 0 ? void 0 : _tracks$main2$.id;\n    }\n  }, [tracks]);\n  const findBestPositionForItem = useCallback((item, targetTrackId) => {\n    const duration = item.duration || (item.type === \"image\" ? 5 : 10);\n    const itemsOnTrack = timelineItems.filter(timelineItem => timelineItem.trackId === targetTrackId).sort((a, b) => a.startTime - b.startTime);\n    if (itemsOnTrack.length === 0) {\n      return currentTime;\n    }\n    const hasSpaceAtCurrentTime = !itemsOnTrack.some(existingItem => {\n      const existingStart = existingItem.startTime;\n      const existingEnd = existingItem.startTime + existingItem.duration;\n      const newStart = currentTime;\n      const newEnd = currentTime + duration;\n      return !(newEnd <= existingStart || newStart >= existingEnd);\n    });\n    if (hasSpaceAtCurrentTime) {\n      return currentTime;\n    }\n    const lastItem = itemsOnTrack[itemsOnTrack.length - 1];\n    return lastItem.startTime + lastItem.duration;\n  }, [timelineItems, currentTime]);\n\n  // Утилиты\n  const getTimelineWidth = () => {\n    const baseWidth = videoDuration * 50 * timelineZoom;\n    return Math.max(baseWidth, 2000);\n  };\n  const getPixelsPerSecond = () => {\n    return 50 * timelineZoom;\n  };\n  const getTrackColor = trackType => {\n    switch (trackType) {\n      case \"overlay\":\n        return \"bg-purple-500 border-purple-400\";\n      case \"main\":\n        return \"bg-blue-500 border-blue-400\";\n      case \"audio\":\n        return \"bg-green-500 border-green-400\";\n      default:\n        return \"bg-gray-500 border-gray-400\";\n    }\n  };\n  const getTimelineItemStyle = item => {\n    const allTracks = [...tracks.overlays, ...tracks.main, ...tracks.audio];\n    const trackIndex = allTracks.findIndex(track => track.id === item.trackId);\n    const pixelsPerSecond = getPixelsPerSecond();\n    return {\n      left: `${item.startTime * pixelsPerSecond}px`,\n      width: `${item.duration * pixelsPerSecond}px`,\n      top: `${trackIndex * 60 + 10}px`\n    };\n  };\n  const getDropPreviewStyle = () => {\n    if (!dropPreview) return {};\n    const allTracks = [...tracks.overlays, ...tracks.main, ...tracks.audio];\n    const trackIndex = allTracks.findIndex(track => track.id === dropPreview.trackId);\n    const pixelsPerSecond = getPixelsPerSecond();\n    return {\n      left: `${dropPreview.time * pixelsPerSecond}px`,\n      width: `${dropPreview.duration * pixelsPerSecond}px`,\n      top: `${trackIndex * 60 + 10}px`\n    };\n  };\n  const zoomIn = () => setTimelineZoom(prev => Math.min(20, prev * 1.5));\n  const zoomOut = () => setTimelineZoom(prev => Math.max(0.1, prev / 1.5));\n  const resetZoom = () => setTimelineZoom(1);\n  const addOverlayTrack = () => {\n    const newTrackId = `overlay-${Date.now()}`;\n    setTracks(prev => ({\n      ...prev,\n      overlays: [...prev.overlays, {\n        id: newTrackId,\n        name: `Overlay ${prev.overlays.length + 1}`,\n        type: \"overlay\"\n      }]\n    }));\n  };\n  const addAudioTrack = () => {\n    const newTrackId = `audio-${Date.now()}`;\n    setTracks(prev => ({\n      ...prev,\n      audio: [...prev.audio, {\n        id: newTrackId,\n        name: `Audio ${prev.audio.length + 1}`,\n        type: \"audio\"\n      }]\n    }));\n  };\n  const addToTimelineAtCurrentTime = useCallback(() => {\n    if (!draggedItem) return;\n    const targetTrackId = getTargetTrackForType(draggedItem.type);\n    if (!targetTrackId) return;\n    const bestPosition = findBestPositionForItem(draggedItem, targetTrackId);\n    addToTimeline(draggedItem, bestPosition, targetTrackId);\n  }, [draggedItem, getTargetTrackForType, findBestPositionForItem, addToTimeline]);\n  const handleResizeStart = useCallback((e, item, handle) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsResizing(true);\n    setResizeHandle(handle);\n    setResizeItem(item);\n    setOriginalItemData({\n      startTime: item.startTime,\n      duration: item.duration\n    });\n    setIsTimelineDragging(false);\n    setDraggedTimelineItem(null);\n  }, [setIsResizing, setIsTimelineDragging, setDraggedTimelineItem]);\n  const handleResizeEnd = useCallback(() => {\n    setIsResizing(false);\n    setResizeHandle(null);\n    setResizeItem(null);\n    setOriginalItemData(null);\n    stopAutoScroll();\n  }, [setIsResizing, stopAutoScroll]);\n  const handleTimelineItemDragStart = (e, timelineItem) => {\n    if (isResizing) {\n      e.preventDefault();\n      return;\n    }\n    e.stopPropagation();\n    setDraggedTimelineItem(timelineItem);\n    setIsTimelineDragging(true);\n    const rect = timelineScrollRef.current.getBoundingClientRect();\n    const itemRect = e.target.getBoundingClientRect();\n    setDragOffset(e.clientX - itemRect.left + timelineScrollRef.current.scrollLeft);\n    e.dataTransfer.effectAllowed = \"move\";\n    e.dataTransfer.setData(\"text/plain\", \"\");\n  };\n  const handleTimelineItemDragEnd = () => {\n    setDraggedTimelineItem(null);\n    setDropPreview(null);\n    setIsTimelineDragging(false);\n    setDragOffset(0);\n    stopAutoScroll();\n  };\n  const handleTimelineClick = e => {\n    if (isDragging || isTimelineDragging || isResizing) return;\n    const rect = timelineScrollRef.current.getBoundingClientRect();\n    const clickX = e.clientX - rect.left + timelineScrollRef.current.scrollLeft;\n    const pixelsPerSecond = getPixelsPerSecond();\n    const clickTime = clickX / pixelsPerSecond;\n    seekTo(clickTime);\n  };\n  const handleTimelineDoubleClick = useCallback(e => {\n    if (isDragging || isTimelineDragging || isResizing || !draggedItem) return;\n    const rect = timelineScrollRef.current.getBoundingClientRect();\n    const clickX = e.clientX - rect.left + timelineScrollRef.current.scrollLeft;\n    const pixelsPerSecond = getPixelsPerSecond();\n    const clickTime = clickX / pixelsPerSecond;\n    const targetTrackId = getTargetTrackForType(draggedItem.type);\n    if (targetTrackId) {\n      addToTimeline(draggedItem, clickTime, targetTrackId);\n    }\n  }, [isDragging, isTimelineDragging, isResizing, draggedItem, getTargetTrackForType, addToTimeline]);\n  const handleDragOver = e => {\n    if (!draggedItem && !draggedTimelineItem) return;\n    e.preventDefault();\n    e.dataTransfer.dropEffect = draggedItem ? \"copy\" : \"move\";\n    if (draggedTimelineItem || isResizing) {\n      checkAutoScroll(e.clientX);\n    }\n    const timelineRect = timelineScrollRef.current.getBoundingClientRect();\n    const dragX = e.clientX - timelineRect.left + timelineScrollRef.current.scrollLeft - (draggedTimelineItem ? dragOffset : 0);\n    const pixelsPerSecond = getPixelsPerSecond();\n    const dropTime = Math.max(0, dragX / pixelsPerSecond);\n    const dragY = e.clientY - timelineRect.top + timelineScrollRef.current.scrollTop;\n    const trackHeight = 60;\n    const timeRulerHeight = 48;\n    const relativeY = dragY - timeRulerHeight;\n    const trackIndex = Math.floor(relativeY / trackHeight);\n    const allTracks = [...tracks.overlays, ...tracks.main, ...tracks.audio];\n    const targetTrack = allTracks[trackIndex];\n    if (draggedItem && targetTrack) {\n      const duration = draggedItem.duration || (draggedItem.type === \"image\" ? 5 : 10);\n      const insertResult = insertWithRipple(targetTrack.id, dropTime, duration);\n      setDropPreview({\n        time: insertResult.time,\n        duration: duration,\n        trackId: targetTrack.id,\n        trackType: targetTrack.type,\n        isValid: true,\n        shouldRipple: insertResult.shouldRipple,\n        affectedItems: insertResult.affectedItems || []\n      });\n    } else if (draggedTimelineItem && targetTrack) {\n      const insertResult = insertWithRipple(targetTrack.id, dropTime, draggedTimelineItem.duration, draggedTimelineItem.id);\n      setDropPreview({\n        time: insertResult.time,\n        duration: draggedTimelineItem.duration,\n        trackId: targetTrack.id,\n        trackType: targetTrack.type,\n        isValid: true,\n        shouldRipple: insertResult.shouldRipple,\n        affectedItems: insertResult.affectedItems || []\n      });\n    }\n  };\n  const handleDrop = e => {\n    e.preventDefault();\n    stopAutoScroll();\n    if (!dropPreview && draggedItem) {\n      const targetTrackId = getTargetTrackForType(draggedItem.type);\n      if (targetTrackId) {\n        const bestPosition = findBestPositionForItem(draggedItem, targetTrackId);\n        addToTimeline(draggedItem, bestPosition, targetTrackId);\n      }\n      setDropPreview(null);\n      setIsTimelineDragging(false);\n      return;\n    }\n    if (!draggedItem && !draggedTimelineItem || !dropPreview) return;\n    if (dropPreview.isValid) {\n      if (draggedItem) {\n        var _dropPreview$affected;\n        if (dropPreview.shouldRipple && ((_dropPreview$affected = dropPreview.affectedItems) === null || _dropPreview$affected === void 0 ? void 0 : _dropPreview$affected.length) > 0) {\n          applyRippleEffect(dropPreview.affectedItems, dropPreview.duration);\n        }\n        addToTimeline(draggedItem, dropPreview.time, dropPreview.trackId);\n      } else if (draggedTimelineItem) {\n        var _dropPreview$affected2;\n        if (dropPreview.shouldRipple && ((_dropPreview$affected2 = dropPreview.affectedItems) === null || _dropPreview$affected2 === void 0 ? void 0 : _dropPreview$affected2.length) > 0) {\n          applyRippleEffect(dropPreview.affectedItems, draggedTimelineItem.duration);\n        }\n        setTimelineItems(prev => prev.map(item => item.id === draggedTimelineItem.id ? {\n          ...item,\n          startTime: dropPreview.time,\n          trackId: dropPreview.trackId,\n          trackType: dropPreview.trackType\n        } : item));\n        const newEndTime = dropPreview.time + draggedTimelineItem.duration;\n        if (newEndTime > videoDuration) {\n          setVideoDuration(newEndTime + 10);\n        }\n      }\n    }\n    setDropPreview(null);\n    setIsTimelineDragging(false);\n  };\n  const handleDragLeave = e => {\n    var _timelineRef$current;\n    if (!((_timelineRef$current = timelineRef.current) !== null && _timelineRef$current !== void 0 && _timelineRef$current.contains(e.relatedTarget))) {\n      setDropPreview(null);\n      stopAutoScroll();\n    }\n  };\n  const handleTrackAreaScroll = e => {\n    if (trackLabelsRef.current) {\n      trackLabelsRef.current.scrollTop = e.target.scrollTop;\n    }\n  };\n  const handleTrackLabelsScroll = e => {\n    if (timelineScrollRef.current) {\n      timelineScrollRef.current.scrollTop = e.target.scrollTop;\n    }\n  };\n  const handleWheel = useCallback(e => {\n    if (e.ctrlKey) {\n      e.preventDefault();\n      if (!timelineScrollRef.current) return;\n      const rect = timelineScrollRef.current.getBoundingClientRect();\n      const mouseX = e.clientX - rect.left + timelineScrollRef.current.scrollLeft;\n      const currentPixelsPerSecond = 50 * timelineZoom;\n      const timeAtMouse = mouseX / currentPixelsPerSecond;\n      const zoomDirection = e.deltaY < 0 ? 1 : -1;\n      const zoomStep = 1.2;\n      setTimelineZoom(prevZoom => {\n        let newZoom;\n        if (zoomDirection > 0) {\n          newZoom = Math.min(20, prevZoom * zoomStep);\n        } else {\n          newZoom = Math.max(0.1, prevZoom / zoomStep);\n        }\n        requestAnimationFrame(() => {\n          if (timelineScrollRef.current) {\n            const newPixelsPerSecond = 50 * newZoom;\n            const newMouseX = timeAtMouse * newPixelsPerSecond;\n            const targetScrollLeft = newMouseX - (e.clientX - rect.left);\n            timelineScrollRef.current.scrollLeft = Math.max(0, targetScrollLeft);\n          }\n        });\n        return newZoom;\n      });\n    } else if (e.shiftKey) {\n      e.preventDefault();\n      if (timelineScrollRef.current) {\n        const scrollAmount = e.deltaY * 2;\n        timelineScrollRef.current.scrollLeft += scrollAmount;\n      }\n    }\n  }, [timelineZoom, setTimelineZoom]);\n  const smartAddToTimeline = useCallback((item, specifiedTime = null, specifiedTrackId = null) => {\n    if (specifiedTime !== null && specifiedTrackId !== null) {\n      addToTimeline(item, specifiedTime, specifiedTrackId);\n      return;\n    }\n    const targetTrackId = specifiedTrackId || getTargetTrackForType(item.type);\n    if (!targetTrackId) {\n      console.error(`Не найдена подходящая дорожка для типа ${item.type}`);\n      return;\n    }\n    const bestPosition = specifiedTime !== null ? specifiedTime : findBestPositionForItem(item, targetTrackId);\n    addToTimeline(item, bestPosition, targetTrackId);\n  }, [addToTimeline, getTargetTrackForType, findBestPositionForItem]);\n  useEffect(() => {\n    const handleMouseMove = e => {\n      if (!isResizing || !resizeItem || !timelineScrollRef.current) return;\n      checkAutoScroll(e.clientX);\n      const rect = timelineScrollRef.current.getBoundingClientRect();\n      const mouseX = e.clientX - rect.left + timelineScrollRef.current.scrollLeft;\n      const pixelsPerSecond = getPixelsPerSecond();\n      const newTime = mouseX / pixelsPerSecond;\n      setTimelineItems(prev => prev.map(item => {\n        if (item.id !== resizeItem.id) return item;\n        const minDuration = 0.1;\n        if (resizeHandle === \"left\") {\n          const rightEdge = originalItemData.startTime + originalItemData.duration;\n          const newStartTime = Math.max(0, Math.min(rightEdge - minDuration, newTime));\n          const newDuration = rightEdge - newStartTime;\n          return {\n            ...item,\n            startTime: newStartTime,\n            duration: newDuration\n          };\n        } else if (resizeHandle === \"right\") {\n          const leftEdge = originalItemData.startTime;\n          const newEndTime = Math.max(leftEdge + minDuration, newTime);\n          const newDuration = newEndTime - leftEdge;\n          return {\n            ...item,\n            duration: newDuration\n          };\n        }\n        return item;\n      }));\n    };\n    const handleMouseUp = () => {\n      if (isResizing) {\n        handleResizeEnd();\n      }\n    };\n    if (isResizing) {\n      document.addEventListener(\"mousemove\", handleMouseMove);\n      document.addEventListener(\"mouseup\", handleMouseUp);\n    }\n    return () => {\n      document.removeEventListener(\"mousemove\", handleMouseMove);\n      document.removeEventListener(\"mouseup\", handleMouseUp);\n    };\n  }, [isResizing, resizeItem, resizeHandle, originalItemData, getPixelsPerSecond, checkAutoScroll, handleResizeEnd, setTimelineItems]);\n  useEffect(() => {\n    if (onSmartAddToTimeline) {\n      onSmartAddToTimeline(smartAddToTimeline);\n    }\n  }, [onSmartAddToTimeline, smartAddToTimeline]);\n  useEffect(() => {\n    return () => {\n      stopAutoScroll();\n    };\n  }, [stopAutoScroll]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `h-80 bg-white rounded-2xl shadow-sm border-2 transition-all duration-200 overflow-hidden flex flex-col flex-shrink-0 ${isDragging || isTimelineDragging || isResizing ? \"border-blue-400 bg-blue-50/20\" : \"border-gray-200\"}`,\n    onWheel: handleWheel,\n    children: [/*#__PURE__*/_jsxDEV(TimelineHeader, {\n      draggedItem: draggedItem,\n      isDragging: isDragging,\n      isTimelineDragging: isTimelineDragging,\n      isResizing: isResizing,\n      setShowExportModal: setShowExportModal,\n      dropPreview: dropPreview,\n      timelineItems: timelineItems,\n      draggedTimelineItem: draggedTimelineItem,\n      resizeItem: resizeItem,\n      resizeHandle: resizeHandle,\n      copiedItem: copiedItem,\n      timelineZoom: timelineZoom,\n      selectedTimelineItem: selectedTimelineItem,\n      addOverlayTrack: addOverlayTrack,\n      addAudioTrack: addAudioTrack,\n      addToTimelineAtCurrentTime: addToTimelineAtCurrentTime,\n      splitTimelineItem: splitTimelineItem,\n      copyTimelineItem: copyTimelineItem,\n      pasteTimelineItem: pasteTimelineItem,\n      deleteSelectedItem: deleteSelectedItem,\n      zoomIn: zoomIn,\n      zoomOut: zoomOut,\n      resetZoom: resetZoom\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 670,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 flex min-h-0\",\n      children: [/*#__PURE__*/_jsxDEV(TrackLabels, {\n        tracks: tracks,\n        trackLabelsRef: trackLabelsRef,\n        onScroll: handleTrackLabelsScroll\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 697,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TimelineCanvas, {\n        timelineRef: timelineRef,\n        timelineScrollRef: timelineScrollRef,\n        tracks: tracks,\n        onVolumeChange: handleVolumeChange,\n        showVolumeControls: true,\n        timelineItems: timelineItems,\n        selectedTimelineItem: selectedTimelineItem,\n        draggedTimelineItem: draggedTimelineItem,\n        copiedItem: copiedItem,\n        dropPreview: dropPreview,\n        getTimelineWidth: getTimelineWidth,\n        getPixelsPerSecond: getPixelsPerSecond,\n        getTrackColor: getTrackColor,\n        getTimelineItemStyle: getTimelineItemStyle,\n        getDropPreviewStyle: getDropPreviewStyle,\n        videoDuration: videoDuration,\n        timelineZoom: timelineZoom,\n        currentTime: currentTime,\n        formatTime: formatTime,\n        onScroll: handleTrackAreaScroll,\n        onDragOver: handleDragOver,\n        onDrop: handleDrop,\n        onDragLeave: handleDragLeave,\n        showOpacityControls: true,\n        onOpacityChange: onOpacityChange,\n        onClick: handleTimelineClick,\n        onDoubleClick: handleTimelineDoubleClick,\n        onTimelineItemSelect: setSelectedTimelineItem,\n        onTimelineItemDragStart: handleTimelineItemDragStart,\n        onTimelineItemDragEnd: handleTimelineItemDragEnd,\n        onResizeStart: handleResizeStart\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 703,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 696,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 662,\n    columnNumber: 5\n  }, this);\n};\n_s(Timeline, \"TZSkJD8joOh6Hjqr/Q+1TKdsRfQ=\");\n_c = Timeline;\nvar _c;\n$RefreshReg$(_c, \"Timeline\");","map":{"version":3,"names":["useState","useRef","useEffect","useCallback","TimelineCanvas","TimelineHeader","TrackLabels","jsxDEV","_jsxDEV","Timeline","timelineItems","setTimelineItems","currentTime","videoDuration","setVideoDuration","selectedTimelineItem","setSelectedTimelineItem","timelineZoom","setTimelineZoom","tracks","setTracks","draggedItem","draggedTimelineItem","setDraggedTimelineItem","dropPreview","setDropPreview","setShowExportModal","isDragging","isTimelineDragging","setIsTimelineDragging","isResizing","setIsResizing","copiedItem","formatTime","seekTo","splitTimelineItem","copyTimelineItem","pasteTimelineItem","deleteSelectedItem","addToTimeline","handleVolumeChange","insertWithRipple","onOpacityChange","applyRippleEffect","onSmartAddToTimeline","_s","timelineRef","timelineScrollRef","trackLabelsRef","autoScrollIntervalRef","dragOffset","setDragOffset","resizeHandle","setResizeHandle","resizeItem","setResizeItem","originalItemData","setOriginalItemData","stopAutoScroll","current","clearInterval","startAutoScroll","direction","speed","setInterval","scrollAmount","currentScrollLeft","scrollLeft","maxScroll","scrollWidth","clientWidth","Math","max","min","checkAutoScroll","clientX","rect","getBoundingClientRect","scrollZoneWidth","relativeX","left","width","getTargetTrackForType","mediaType","_tracks$main","_tracks$audio","_tracks$overlays","_tracks$main2","_tracks$main2$","mainTrack","main","id","audioTrack","audio","overlayTrack","overlays","findBestPositionForItem","item","targetTrackId","duration","type","itemsOnTrack","filter","timelineItem","trackId","sort","a","b","startTime","length","hasSpaceAtCurrentTime","some","existingItem","existingStart","existingEnd","newStart","newEnd","lastItem","getTimelineWidth","baseWidth","getPixelsPerSecond","getTrackColor","trackType","getTimelineItemStyle","allTracks","trackIndex","findIndex","track","pixelsPerSecond","top","getDropPreviewStyle","time","zoomIn","prev","zoomOut","resetZoom","addOverlayTrack","newTrackId","Date","now","name","addAudioTrack","addToTimelineAtCurrentTime","bestPosition","handleResizeStart","e","handle","preventDefault","stopPropagation","handleResizeEnd","handleTimelineItemDragStart","itemRect","target","dataTransfer","effectAllowed","setData","handleTimelineItemDragEnd","handleTimelineClick","clickX","clickTime","handleTimelineDoubleClick","handleDragOver","dropEffect","timelineRect","dragX","dropTime","dragY","clientY","scrollTop","trackHeight","timeRulerHeight","relativeY","floor","targetTrack","insertResult","isValid","shouldRipple","affectedItems","handleDrop","_dropPreview$affected","_dropPreview$affected2","map","newEndTime","handleDragLeave","_timelineRef$current","contains","relatedTarget","handleTrackAreaScroll","handleTrackLabelsScroll","handleWheel","ctrlKey","mouseX","currentPixelsPerSecond","timeAtMouse","zoomDirection","deltaY","zoomStep","prevZoom","newZoom","requestAnimationFrame","newPixelsPerSecond","newMouseX","targetScrollLeft","shiftKey","smartAddToTimeline","specifiedTime","specifiedTrackId","console","error","handleMouseMove","newTime","minDuration","rightEdge","newStartTime","newDuration","leftEdge","handleMouseUp","document","addEventListener","removeEventListener","className","onWheel","children","fileName","_jsxFileName","lineNumber","columnNumber","onScroll","onVolumeChange","showVolumeControls","onDragOver","onDrop","onDragLeave","showOpacityControls","onClick","onDoubleClick","onTimelineItemSelect","onTimelineItemDragStart","onTimelineItemDragEnd","onResizeStart","_c","$RefreshReg$"],"sources":["C:/Scriptify/ai-content-studio/frontend/src/components/Timeline/Timeline.jsx"],"sourcesContent":["import { useState, useRef, useEffect, useCallback } from \"react\";\r\nimport { TimelineCanvas } from \"./TimelineCanvas\";\r\nimport { TimelineHeader } from \"./TimelineHeader\";\r\n\r\nimport { TrackLabels } from \"./TrackLabels\";\r\nexport const Timeline = ({\r\n  timelineItems,\r\n  setTimelineItems,\r\n  currentTime,\r\n  videoDuration,\r\n  setVideoDuration,\r\n  selectedTimelineItem,\r\n  setSelectedTimelineItem,\r\n  timelineZoom,\r\n  setTimelineZoom,\r\n  tracks,\r\n  setTracks,\r\n  draggedItem,\r\n  draggedTimelineItem,\r\n  setDraggedTimelineItem,\r\n  dropPreview,\r\n  setDropPreview,\r\n  setShowExportModal,\r\n  isDragging,\r\n  isTimelineDragging,\r\n  setIsTimelineDragging,\r\n  isResizing,\r\n  setIsResizing,\r\n  copiedItem,\r\n  formatTime,\r\n  seekTo,\r\n  splitTimelineItem,\r\n  copyTimelineItem,\r\n  pasteTimelineItem,\r\n  deleteSelectedItem,\r\n  addToTimeline,\r\n  handleVolumeChange,\r\n  insertWithRipple,\r\n  onOpacityChange,\r\n  applyRippleEffect,\r\n  onSmartAddToTimeline,\r\n}) => {\r\n  const timelineRef = useRef(null);\r\n  const timelineScrollRef = useRef(null);\r\n  const trackLabelsRef = useRef(null);\r\n  const autoScrollIntervalRef = useRef(null);\r\n  const [dragOffset, setDragOffset] = useState(0);\r\n  const [resizeHandle, setResizeHandle] = useState(null);\r\n  const [resizeItem, setResizeItem] = useState(null);\r\n  const [originalItemData, setOriginalItemData] = useState(null);\r\n\r\n  const stopAutoScroll = useCallback(() => {\r\n    if (autoScrollIntervalRef.current) {\r\n      clearInterval(autoScrollIntervalRef.current);\r\n      autoScrollIntervalRef.current = null;\r\n    }\r\n  }, []);\r\n\r\n  const startAutoScroll = useCallback(\r\n    (direction, speed = 1) => {\r\n      stopAutoScroll();\r\n\r\n      autoScrollIntervalRef.current = setInterval(() => {\r\n        if (timelineScrollRef.current) {\r\n          const scrollAmount = 15 * speed;\r\n          const currentScrollLeft = timelineScrollRef.current.scrollLeft;\r\n          const maxScroll =\r\n            timelineScrollRef.current.scrollWidth -\r\n            timelineScrollRef.current.clientWidth;\r\n\r\n          if (direction === \"left\" && currentScrollLeft > 0) {\r\n            timelineScrollRef.current.scrollLeft = Math.max(\r\n              0,\r\n              currentScrollLeft - scrollAmount\r\n            );\r\n          } else if (direction === \"right\" && currentScrollLeft < maxScroll) {\r\n            timelineScrollRef.current.scrollLeft = Math.min(\r\n              maxScroll,\r\n              currentScrollLeft + scrollAmount\r\n            );\r\n          }\r\n        }\r\n      }, 16);\r\n    },\r\n    [stopAutoScroll]\r\n  );\r\n\r\n  const checkAutoScroll = useCallback(\r\n    (clientX) => {\r\n      if (!timelineScrollRef.current) return;\r\n\r\n      const rect = timelineScrollRef.current.getBoundingClientRect();\r\n      const scrollZoneWidth = 120;\r\n      const relativeX = clientX - rect.left;\r\n\r\n      if (\r\n        relativeX < scrollZoneWidth &&\r\n        timelineScrollRef.current.scrollLeft > 0\r\n      ) {\r\n        const speed = ((scrollZoneWidth - relativeX) / scrollZoneWidth) * 3;\r\n        startAutoScroll(\"left\", speed);\r\n      } else if (relativeX > rect.width - scrollZoneWidth) {\r\n        const maxScroll =\r\n          timelineScrollRef.current.scrollWidth -\r\n          timelineScrollRef.current.clientWidth;\r\n        if (timelineScrollRef.current.scrollLeft < maxScroll) {\r\n          const speed =\r\n            ((relativeX - (rect.width - scrollZoneWidth)) / scrollZoneWidth) *\r\n            3;\r\n          startAutoScroll(\"right\", speed);\r\n        }\r\n      } else {\r\n        stopAutoScroll();\r\n      }\r\n    },\r\n    [startAutoScroll, stopAutoScroll]\r\n  );\r\n\r\n  const getTargetTrackForType = useCallback(\r\n    (mediaType) => {\r\n      switch (mediaType) {\r\n        case \"videos\":\r\n          const mainTrack = tracks.main?.[0];\r\n          return mainTrack?.id;\r\n        case \"audios\":\r\n          const audioTrack = tracks.audio?.[0];\r\n          return audioTrack?.id;\r\n        case \"images\":\r\n          const overlayTrack = tracks.overlays?.[0];\r\n          return overlayTrack?.id;\r\n        default:\r\n          return tracks.main?.[0]?.id;\r\n      }\r\n    },\r\n    [tracks]\r\n  );\r\n\r\n  const findBestPositionForItem = useCallback(\r\n    (item, targetTrackId) => {\r\n      const duration = item.duration || (item.type === \"image\" ? 5 : 10);\r\n\r\n      const itemsOnTrack = timelineItems\r\n        .filter((timelineItem) => timelineItem.trackId === targetTrackId)\r\n        .sort((a, b) => a.startTime - b.startTime);\r\n\r\n      if (itemsOnTrack.length === 0) {\r\n        return currentTime;\r\n      }\r\n\r\n      const hasSpaceAtCurrentTime = !itemsOnTrack.some((existingItem) => {\r\n        const existingStart = existingItem.startTime;\r\n        const existingEnd = existingItem.startTime + existingItem.duration;\r\n        const newStart = currentTime;\r\n        const newEnd = currentTime + duration;\r\n        return !(newEnd <= existingStart || newStart >= existingEnd);\r\n      });\r\n\r\n      if (hasSpaceAtCurrentTime) {\r\n        return currentTime;\r\n      }\r\n\r\n      const lastItem = itemsOnTrack[itemsOnTrack.length - 1];\r\n      return lastItem.startTime + lastItem.duration;\r\n    },\r\n    [timelineItems, currentTime]\r\n  );\r\n\r\n  // Утилиты\r\n  const getTimelineWidth = () => {\r\n    const baseWidth = videoDuration * 50 * timelineZoom;\r\n    return Math.max(baseWidth, 2000);\r\n  };\r\n\r\n  const getPixelsPerSecond = () => {\r\n    return 50 * timelineZoom;\r\n  };\r\n\r\n  const getTrackColor = (trackType) => {\r\n    switch (trackType) {\r\n      case \"overlay\":\r\n        return \"bg-purple-500 border-purple-400\";\r\n      case \"main\":\r\n        return \"bg-blue-500 border-blue-400\";\r\n      case \"audio\":\r\n        return \"bg-green-500 border-green-400\";\r\n      default:\r\n        return \"bg-gray-500 border-gray-400\";\r\n    }\r\n  };\r\n\r\n  const getTimelineItemStyle = (item) => {\r\n    const allTracks = [...tracks.overlays, ...tracks.main, ...tracks.audio];\r\n    const trackIndex = allTracks.findIndex(\r\n      (track) => track.id === item.trackId\r\n    );\r\n    const pixelsPerSecond = getPixelsPerSecond();\r\n\r\n    return {\r\n      left: `${item.startTime * pixelsPerSecond}px`,\r\n      width: `${item.duration * pixelsPerSecond}px`,\r\n      top: `${trackIndex * 60 + 10}px`,\r\n    };\r\n  };\r\n\r\n  const getDropPreviewStyle = () => {\r\n    if (!dropPreview) return {};\r\n\r\n    const allTracks = [...tracks.overlays, ...tracks.main, ...tracks.audio];\r\n    const trackIndex = allTracks.findIndex(\r\n      (track) => track.id === dropPreview.trackId\r\n    );\r\n    const pixelsPerSecond = getPixelsPerSecond();\r\n\r\n    return {\r\n      left: `${dropPreview.time * pixelsPerSecond}px`,\r\n      width: `${dropPreview.duration * pixelsPerSecond}px`,\r\n      top: `${trackIndex * 60 + 10}px`,\r\n    };\r\n  };\r\n\r\n  const zoomIn = () => setTimelineZoom((prev) => Math.min(20, prev * 1.5));\r\n  const zoomOut = () => setTimelineZoom((prev) => Math.max(0.1, prev / 1.5));\r\n  const resetZoom = () => setTimelineZoom(1);\r\n\r\n  const addOverlayTrack = () => {\r\n    const newTrackId = `overlay-${Date.now()}`;\r\n    setTracks((prev) => ({\r\n      ...prev,\r\n      overlays: [\r\n        ...prev.overlays,\r\n        {\r\n          id: newTrackId,\r\n          name: `Overlay ${prev.overlays.length + 1}`,\r\n          type: \"overlay\",\r\n        },\r\n      ],\r\n    }));\r\n  };\r\n\r\n  const addAudioTrack = () => {\r\n    const newTrackId = `audio-${Date.now()}`;\r\n    setTracks((prev) => ({\r\n      ...prev,\r\n      audio: [\r\n        ...prev.audio,\r\n        {\r\n          id: newTrackId,\r\n          name: `Audio ${prev.audio.length + 1}`,\r\n          type: \"audio\",\r\n        },\r\n      ],\r\n    }));\r\n  };\r\n\r\n  const addToTimelineAtCurrentTime = useCallback(() => {\r\n    if (!draggedItem) return;\r\n\r\n    const targetTrackId = getTargetTrackForType(draggedItem.type);\r\n    if (!targetTrackId) return;\r\n\r\n    const bestPosition = findBestPositionForItem(draggedItem, targetTrackId);\r\n    addToTimeline(draggedItem, bestPosition, targetTrackId);\r\n  }, [\r\n    draggedItem,\r\n    getTargetTrackForType,\r\n    findBestPositionForItem,\r\n    addToTimeline,\r\n  ]);\r\n\r\n  const handleResizeStart = useCallback(\r\n    (e, item, handle) => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      setIsResizing(true);\r\n      setResizeHandle(handle);\r\n      setResizeItem(item);\r\n      setOriginalItemData({\r\n        startTime: item.startTime,\r\n        duration: item.duration,\r\n      });\r\n\r\n      setIsTimelineDragging(false);\r\n      setDraggedTimelineItem(null);\r\n    },\r\n    [setIsResizing, setIsTimelineDragging, setDraggedTimelineItem]\r\n  );\r\n\r\n  const handleResizeEnd = useCallback(() => {\r\n    setIsResizing(false);\r\n    setResizeHandle(null);\r\n    setResizeItem(null);\r\n    setOriginalItemData(null);\r\n    stopAutoScroll();\r\n  }, [setIsResizing, stopAutoScroll]);\r\n\r\n  const handleTimelineItemDragStart = (e, timelineItem) => {\r\n    if (isResizing) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n\r\n    e.stopPropagation();\r\n    setDraggedTimelineItem(timelineItem);\r\n    setIsTimelineDragging(true);\r\n\r\n    const rect = timelineScrollRef.current.getBoundingClientRect();\r\n    const itemRect = e.target.getBoundingClientRect();\r\n    setDragOffset(\r\n      e.clientX - itemRect.left + timelineScrollRef.current.scrollLeft\r\n    );\r\n\r\n    e.dataTransfer.effectAllowed = \"move\";\r\n    e.dataTransfer.setData(\"text/plain\", \"\");\r\n  };\r\n\r\n  const handleTimelineItemDragEnd = () => {\r\n    setDraggedTimelineItem(null);\r\n    setDropPreview(null);\r\n    setIsTimelineDragging(false);\r\n    setDragOffset(0);\r\n    stopAutoScroll();\r\n  };\r\n\r\n  const handleTimelineClick = (e) => {\r\n    if (isDragging || isTimelineDragging || isResizing) return;\r\n\r\n    const rect = timelineScrollRef.current.getBoundingClientRect();\r\n    const clickX = e.clientX - rect.left + timelineScrollRef.current.scrollLeft;\r\n    const pixelsPerSecond = getPixelsPerSecond();\r\n    const clickTime = clickX / pixelsPerSecond;\r\n    seekTo(clickTime);\r\n  };\r\n\r\n  const handleTimelineDoubleClick = useCallback(\r\n    (e) => {\r\n      if (isDragging || isTimelineDragging || isResizing || !draggedItem)\r\n        return;\r\n\r\n      const rect = timelineScrollRef.current.getBoundingClientRect();\r\n      const clickX =\r\n        e.clientX - rect.left + timelineScrollRef.current.scrollLeft;\r\n      const pixelsPerSecond = getPixelsPerSecond();\r\n      const clickTime = clickX / pixelsPerSecond;\r\n\r\n      const targetTrackId = getTargetTrackForType(draggedItem.type);\r\n      if (targetTrackId) {\r\n        addToTimeline(draggedItem, clickTime, targetTrackId);\r\n      }\r\n    },\r\n    [\r\n      isDragging,\r\n      isTimelineDragging,\r\n      isResizing,\r\n      draggedItem,\r\n      getTargetTrackForType,\r\n      addToTimeline,\r\n    ]\r\n  );\r\n\r\n  const handleDragOver = (e) => {\r\n    if (!draggedItem && !draggedTimelineItem) return;\r\n\r\n    e.preventDefault();\r\n    e.dataTransfer.dropEffect = draggedItem ? \"copy\" : \"move\";\r\n\r\n    if (draggedTimelineItem || isResizing) {\r\n      checkAutoScroll(e.clientX);\r\n    }\r\n\r\n    const timelineRect = timelineScrollRef.current.getBoundingClientRect();\r\n    const dragX =\r\n      e.clientX -\r\n      timelineRect.left +\r\n      timelineScrollRef.current.scrollLeft -\r\n      (draggedTimelineItem ? dragOffset : 0);\r\n    const pixelsPerSecond = getPixelsPerSecond();\r\n    const dropTime = Math.max(0, dragX / pixelsPerSecond);\r\n\r\n    const dragY =\r\n      e.clientY - timelineRect.top + timelineScrollRef.current.scrollTop;\r\n    const trackHeight = 60;\r\n    const timeRulerHeight = 48;\r\n\r\n    const relativeY = dragY - timeRulerHeight;\r\n    const trackIndex = Math.floor(relativeY / trackHeight);\r\n\r\n    const allTracks = [...tracks.overlays, ...tracks.main, ...tracks.audio];\r\n    const targetTrack = allTracks[trackIndex];\r\n\r\n    if (draggedItem && targetTrack) {\r\n      const duration =\r\n        draggedItem.duration || (draggedItem.type === \"image\" ? 5 : 10);\r\n      const insertResult = insertWithRipple(targetTrack.id, dropTime, duration);\r\n\r\n      setDropPreview({\r\n        time: insertResult.time,\r\n        duration: duration,\r\n        trackId: targetTrack.id,\r\n        trackType: targetTrack.type,\r\n        isValid: true,\r\n        shouldRipple: insertResult.shouldRipple,\r\n        affectedItems: insertResult.affectedItems || [],\r\n      });\r\n    } else if (draggedTimelineItem && targetTrack) {\r\n      const insertResult = insertWithRipple(\r\n        targetTrack.id,\r\n        dropTime,\r\n        draggedTimelineItem.duration,\r\n        draggedTimelineItem.id\r\n      );\r\n\r\n      setDropPreview({\r\n        time: insertResult.time,\r\n        duration: draggedTimelineItem.duration,\r\n        trackId: targetTrack.id,\r\n        trackType: targetTrack.type,\r\n        isValid: true,\r\n        shouldRipple: insertResult.shouldRipple,\r\n        affectedItems: insertResult.affectedItems || [],\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDrop = (e) => {\r\n    e.preventDefault();\r\n    stopAutoScroll();\r\n\r\n    if (!dropPreview && draggedItem) {\r\n      const targetTrackId = getTargetTrackForType(draggedItem.type);\r\n      if (targetTrackId) {\r\n        const bestPosition = findBestPositionForItem(\r\n          draggedItem,\r\n          targetTrackId\r\n        );\r\n        addToTimeline(draggedItem, bestPosition, targetTrackId);\r\n      }\r\n      setDropPreview(null);\r\n      setIsTimelineDragging(false);\r\n      return;\r\n    }\r\n\r\n    if ((!draggedItem && !draggedTimelineItem) || !dropPreview) return;\r\n\r\n    if (dropPreview.isValid) {\r\n      if (draggedItem) {\r\n        if (dropPreview.shouldRipple && dropPreview.affectedItems?.length > 0) {\r\n          applyRippleEffect(dropPreview.affectedItems, dropPreview.duration);\r\n        }\r\n        addToTimeline(draggedItem, dropPreview.time, dropPreview.trackId);\r\n      } else if (draggedTimelineItem) {\r\n        if (dropPreview.shouldRipple && dropPreview.affectedItems?.length > 0) {\r\n          applyRippleEffect(\r\n            dropPreview.affectedItems,\r\n            draggedTimelineItem.duration\r\n          );\r\n        }\r\n\r\n        setTimelineItems((prev) =>\r\n          prev.map((item) =>\r\n            item.id === draggedTimelineItem.id\r\n              ? {\r\n                  ...item,\r\n                  startTime: dropPreview.time,\r\n                  trackId: dropPreview.trackId,\r\n                  trackType: dropPreview.trackType,\r\n                }\r\n              : item\r\n          )\r\n        );\r\n\r\n        const newEndTime = dropPreview.time + draggedTimelineItem.duration;\r\n        if (newEndTime > videoDuration) {\r\n          setVideoDuration(newEndTime + 10);\r\n        }\r\n      }\r\n    }\r\n\r\n    setDropPreview(null);\r\n    setIsTimelineDragging(false);\r\n  };\r\n\r\n  const handleDragLeave = (e) => {\r\n    if (!timelineRef.current?.contains(e.relatedTarget)) {\r\n      setDropPreview(null);\r\n      stopAutoScroll();\r\n    }\r\n  };\r\n\r\n  const handleTrackAreaScroll = (e) => {\r\n    if (trackLabelsRef.current) {\r\n      trackLabelsRef.current.scrollTop = e.target.scrollTop;\r\n    }\r\n  };\r\n\r\n  const handleTrackLabelsScroll = (e) => {\r\n    if (timelineScrollRef.current) {\r\n      timelineScrollRef.current.scrollTop = e.target.scrollTop;\r\n    }\r\n  };\r\n\r\n  const handleWheel = useCallback(\r\n    (e) => {\r\n      if (e.ctrlKey) {\r\n        e.preventDefault();\r\n\r\n        if (!timelineScrollRef.current) return;\r\n\r\n        const rect = timelineScrollRef.current.getBoundingClientRect();\r\n        const mouseX =\r\n          e.clientX - rect.left + timelineScrollRef.current.scrollLeft;\r\n        const currentPixelsPerSecond = 50 * timelineZoom;\r\n        const timeAtMouse = mouseX / currentPixelsPerSecond;\r\n\r\n        const zoomDirection = e.deltaY < 0 ? 1 : -1;\r\n        const zoomStep = 1.2;\r\n\r\n        setTimelineZoom((prevZoom) => {\r\n          let newZoom;\r\n          if (zoomDirection > 0) {\r\n            newZoom = Math.min(20, prevZoom * zoomStep);\r\n          } else {\r\n            newZoom = Math.max(0.1, prevZoom / zoomStep);\r\n          }\r\n\r\n          requestAnimationFrame(() => {\r\n            if (timelineScrollRef.current) {\r\n              const newPixelsPerSecond = 50 * newZoom;\r\n              const newMouseX = timeAtMouse * newPixelsPerSecond;\r\n              const targetScrollLeft = newMouseX - (e.clientX - rect.left);\r\n              timelineScrollRef.current.scrollLeft = Math.max(\r\n                0,\r\n                targetScrollLeft\r\n              );\r\n            }\r\n          });\r\n\r\n          return newZoom;\r\n        });\r\n      } else if (e.shiftKey) {\r\n        e.preventDefault();\r\n\r\n        if (timelineScrollRef.current) {\r\n          const scrollAmount = e.deltaY * 2;\r\n          timelineScrollRef.current.scrollLeft += scrollAmount;\r\n        }\r\n      }\r\n    },\r\n    [timelineZoom, setTimelineZoom]\r\n  );\r\n\r\n  const smartAddToTimeline = useCallback(\r\n    (item, specifiedTime = null, specifiedTrackId = null) => {\r\n      if (specifiedTime !== null && specifiedTrackId !== null) {\r\n        addToTimeline(item, specifiedTime, specifiedTrackId);\r\n        return;\r\n      }\r\n\r\n      const targetTrackId =\r\n        specifiedTrackId || getTargetTrackForType(item.type);\r\n      if (!targetTrackId) {\r\n        console.error(`Не найдена подходящая дорожка для типа ${item.type}`);\r\n        return;\r\n      }\r\n\r\n      const bestPosition =\r\n        specifiedTime !== null\r\n          ? specifiedTime\r\n          : findBestPositionForItem(item, targetTrackId);\r\n\r\n      addToTimeline(item, bestPosition, targetTrackId);\r\n    },\r\n    [addToTimeline, getTargetTrackForType, findBestPositionForItem]\r\n  );\r\n\r\n  useEffect(() => {\r\n    const handleMouseMove = (e) => {\r\n      if (!isResizing || !resizeItem || !timelineScrollRef.current) return;\r\n\r\n      checkAutoScroll(e.clientX);\r\n\r\n      const rect = timelineScrollRef.current.getBoundingClientRect();\r\n      const mouseX =\r\n        e.clientX - rect.left + timelineScrollRef.current.scrollLeft;\r\n      const pixelsPerSecond = getPixelsPerSecond();\r\n      const newTime = mouseX / pixelsPerSecond;\r\n\r\n      setTimelineItems((prev) =>\r\n        prev.map((item) => {\r\n          if (item.id !== resizeItem.id) return item;\r\n\r\n          const minDuration = 0.1;\r\n\r\n          if (resizeHandle === \"left\") {\r\n            const rightEdge =\r\n              originalItemData.startTime + originalItemData.duration;\r\n            const newStartTime = Math.max(\r\n              0,\r\n              Math.min(rightEdge - minDuration, newTime)\r\n            );\r\n            const newDuration = rightEdge - newStartTime;\r\n\r\n            return {\r\n              ...item,\r\n              startTime: newStartTime,\r\n              duration: newDuration,\r\n            };\r\n          } else if (resizeHandle === \"right\") {\r\n            const leftEdge = originalItemData.startTime;\r\n            const newEndTime = Math.max(leftEdge + minDuration, newTime);\r\n            const newDuration = newEndTime - leftEdge;\r\n\r\n            return {\r\n              ...item,\r\n              duration: newDuration,\r\n            };\r\n          }\r\n\r\n          return item;\r\n        })\r\n      );\r\n    };\r\n\r\n    const handleMouseUp = () => {\r\n      if (isResizing) {\r\n        handleResizeEnd();\r\n      }\r\n    };\r\n\r\n    if (isResizing) {\r\n      document.addEventListener(\"mousemove\", handleMouseMove);\r\n      document.addEventListener(\"mouseup\", handleMouseUp);\r\n    }\r\n\r\n    return () => {\r\n      document.removeEventListener(\"mousemove\", handleMouseMove);\r\n      document.removeEventListener(\"mouseup\", handleMouseUp);\r\n    };\r\n  }, [\r\n    isResizing,\r\n    resizeItem,\r\n    resizeHandle,\r\n    originalItemData,\r\n    getPixelsPerSecond,\r\n    checkAutoScroll,\r\n    handleResizeEnd,\r\n    setTimelineItems,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (onSmartAddToTimeline) {\r\n      onSmartAddToTimeline(smartAddToTimeline);\r\n    }\r\n  }, [onSmartAddToTimeline, smartAddToTimeline]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      stopAutoScroll();\r\n    };\r\n  }, [stopAutoScroll]);\r\n\r\n  return (\r\n    <div\r\n      className={`h-80 bg-white rounded-2xl shadow-sm border-2 transition-all duration-200 overflow-hidden flex flex-col flex-shrink-0 ${\r\n        isDragging || isTimelineDragging || isResizing\r\n          ? \"border-blue-400 bg-blue-50/20\"\r\n          : \"border-gray-200\"\r\n      }`}\r\n      onWheel={handleWheel}\r\n    >\r\n      <TimelineHeader\r\n        draggedItem={draggedItem}\r\n        isDragging={isDragging}\r\n        isTimelineDragging={isTimelineDragging}\r\n        isResizing={isResizing}\r\n        setShowExportModal={setShowExportModal}\r\n        dropPreview={dropPreview}\r\n        timelineItems={timelineItems}\r\n        draggedTimelineItem={draggedTimelineItem}\r\n        resizeItem={resizeItem}\r\n        resizeHandle={resizeHandle}\r\n        copiedItem={copiedItem}\r\n        timelineZoom={timelineZoom}\r\n        selectedTimelineItem={selectedTimelineItem}\r\n        addOverlayTrack={addOverlayTrack}\r\n        addAudioTrack={addAudioTrack}\r\n        addToTimelineAtCurrentTime={addToTimelineAtCurrentTime}\r\n        splitTimelineItem={splitTimelineItem}\r\n        copyTimelineItem={copyTimelineItem}\r\n        pasteTimelineItem={pasteTimelineItem}\r\n        deleteSelectedItem={deleteSelectedItem}\r\n        zoomIn={zoomIn}\r\n        zoomOut={zoomOut}\r\n        resetZoom={resetZoom}\r\n      />\r\n\r\n      <div className=\"flex-1 flex min-h-0\">\r\n        <TrackLabels\r\n          tracks={tracks}\r\n          trackLabelsRef={trackLabelsRef}\r\n          onScroll={handleTrackLabelsScroll}\r\n        />\r\n\r\n        <TimelineCanvas\r\n          timelineRef={timelineRef}\r\n          timelineScrollRef={timelineScrollRef}\r\n          tracks={tracks}\r\n          onVolumeChange={handleVolumeChange}\r\n          showVolumeControls={true}\r\n          timelineItems={timelineItems}\r\n          selectedTimelineItem={selectedTimelineItem}\r\n          draggedTimelineItem={draggedTimelineItem}\r\n          copiedItem={copiedItem}\r\n          dropPreview={dropPreview}\r\n          getTimelineWidth={getTimelineWidth}\r\n          getPixelsPerSecond={getPixelsPerSecond}\r\n          getTrackColor={getTrackColor}\r\n          getTimelineItemStyle={getTimelineItemStyle}\r\n          getDropPreviewStyle={getDropPreviewStyle}\r\n          videoDuration={videoDuration}\r\n          timelineZoom={timelineZoom}\r\n          currentTime={currentTime}\r\n          formatTime={formatTime}\r\n          onScroll={handleTrackAreaScroll}\r\n          onDragOver={handleDragOver}\r\n          onDrop={handleDrop}\r\n          onDragLeave={handleDragLeave}\r\n          showOpacityControls={true}\r\n          onOpacityChange={onOpacityChange}\r\n          onClick={handleTimelineClick}\r\n          onDoubleClick={handleTimelineDoubleClick}\r\n          onTimelineItemSelect={setSelectedTimelineItem}\r\n          onTimelineItemDragStart={handleTimelineItemDragStart}\r\n          onTimelineItemDragEnd={handleTimelineItemDragEnd}\r\n          onResizeStart={handleResizeStart}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}