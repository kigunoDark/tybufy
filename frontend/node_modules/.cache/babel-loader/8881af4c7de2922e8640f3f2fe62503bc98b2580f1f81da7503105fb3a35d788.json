{"ast":null,"code":"var _jsxFileName = \"C:\\\\Scriptify\\\\ai-content-studio\\\\frontend\\\\src\\\\contexts\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from \"react\";\nimport JWTService from \"../components/utils/jwt\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000\";\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const apiCall = async (endpoint, options = {}) => {\n    const url = `${API_BASE_URL}${endpoint}`;\n    const token = localStorage.getItem(\"authToken\");\n    if (token && JWTService.isTokenExpired(token)) {\n      await logout();\n      throw new Error(\"Token expired\");\n    }\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...(token && {\n          Authorization: `Bearer ${token}`\n        }),\n        ...options.headers\n      },\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n      if (response.status === 401) {\n        await logout();\n        throw new Error(\"Unauthorized\");\n      }\n      if (!response.ok) {\n        throw new Error(data.error || \"Something went wrong\");\n      }\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n  useEffect(() => {\n    const checkAuth = async () => {\n      const token = localStorage.getItem(\"authToken\");\n      if (!token) {\n        setLoading(false);\n        return;\n      }\n      if (JWTService.isTokenExpired(token)) {\n        JWTService.clearAuth();\n        setLoading(false);\n        return;\n      }\n      try {\n        const response = await apiCall(\"/api/auth/me\");\n        if (response.success) {\n          setUser(response.data.user);\n          setIsAuthenticated(true);\n          localStorage.setItem(\"userData\", JSON.stringify(response.data.user));\n          JWTService.setupTokenRefresh(refreshToken, token);\n        } else {\n          localStorage.removeItem(\"authToken\");\n          localStorage.removeItem(\"userData\");\n          JWTService.clearAuth();\n        }\n      } catch (error) {\n        localStorage.removeItem(\"authToken\");\n        localStorage.removeItem(\"userData\");\n        JWTService.clearAuth();\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkPaymentSuccess();\n    checkAuth();\n  }, []);\n  const refreshToken = async () => {\n    try {\n      const response = await apiCall(\"/api/auth/refresh\", {\n        method: \"POST\"\n      });\n      if (response.success && response.data.token) {\n        const newToken = response.data.token;\n        localStorage.setItem(\"authToken\", newToken);\n        JWTService.setupTokenRefresh(refreshToken, newToken);\n      }\n    } catch (error) {\n      await logout();\n    }\n  };\n  const checkPaymentSuccess = async () => {\n    try {\n      const urlParams = new URLSearchParams(window.location.search);\n      const sessionId = urlParams.get(\"session_id\");\n      const success = urlParams.get(\"success\");\n      if (sessionId && success === \"true\") {\n        const token = localStorage.getItem(\"authToken\");\n        if (!token) {\n          console.log(\"❌ No auth token found\");\n          return;\n        }\n        try {\n          const response = await apiCall(`/api/payments/session/${sessionId}`);\n          if (response.success && response.data.user) {\n            setUser(response.data.user);\n            localStorage.setItem(\"userData\", JSON.stringify(response.data.user));\n          }\n        } catch (error) {\n          console.error(\"❌ Payment verification failed:\", error);\n        }\n        window.history.replaceState({}, document.title, window.location.pathname);\n      }\n    } catch (error) {\n      console.error(\"❌ Payment check error:\", error);\n    }\n  };\n  const register = async (name, email, password) => {\n    try {\n      setLoading(true);\n      const response = await apiCall(\"/api/auth/register\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          name,\n          email,\n          password\n        })\n      });\n      if (response.success) {\n        const {\n          user: userData,\n          token\n        } = response.data;\n        localStorage.setItem(\"authToken\", token);\n        localStorage.setItem(\"userData\", JSON.stringify(userData));\n        setUser(userData);\n        setIsAuthenticated(true);\n        JWTService.setupTokenRefresh(refreshToken, token);\n        return {\n          success: true,\n          user: userData\n        };\n      }\n      return {\n        success: false,\n        error: response.error\n      };\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      return {\n        success: false,\n        error: error.message || \"Registration failed. Please try again.\"\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      const response = await apiCall(\"/api/auth/login\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (response.success) {\n        const {\n          user: userData,\n          token\n        } = response.data;\n        localStorage.setItem(\"authToken\", token);\n        localStorage.setItem(\"userData\", JSON.stringify(userData));\n        setUser(userData);\n        setIsAuthenticated(true);\n        JWTService.setupTokenRefresh(refreshToken, token);\n        return {\n          success: true,\n          user: userData\n        };\n      }\n      return {\n        success: false,\n        error: response.error\n      };\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      return {\n        success: false,\n        error: error.message || \"Login failed. Please try again.\"\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = async () => {\n    try {\n      await apiCall(\"/api/auth/logout\", {\n        method: \"POST\"\n      });\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n    } finally {\n      localStorage.removeItem(\"authToken\");\n      localStorage.removeItem(\"userData\");\n      setUser(null);\n      setIsAuthenticated(false);\n    }\n  };\n  const generateScript = async (topic, duration = \"medium\", keyPoints = [], contentType = \"Лайфстайл\") => {\n    try {\n      const response = await apiCall(\"/api/script/generate\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          topic,\n          duration,\n          keyPoints,\n          contentType\n        })\n      });\n      if (response.success) {\n        return {\n          success: true,\n          script: response.data.script\n        };\n      }\n      return {\n        success: false,\n        error: response.error\n      };\n    } catch (error) {\n      console.error(\"Script generation error:\", error);\n      return {\n        success: false,\n        error: error.message || \"Script generation failed. Please try again.\"\n      };\n    }\n  };\n  const generateKeyPoints = async (topic, contentType = \"Лайфстайл\") => {\n    try {\n      const response = await apiCall(\"/api/script/key-points\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          topic,\n          contentType\n        })\n      });\n      if (response.success) {\n        return {\n          success: true,\n          points: response.data.points\n        };\n      }\n      return {\n        success: false,\n        error: response.error\n      };\n    } catch (error) {\n      console.error(\"Key points generation error:\", error);\n      return {\n        success: false,\n        error: error.message || \"Key points generation failed. Please try again.\"\n      };\n    }\n  };\n  const improveScript = async (selectedText, improvementCommand, script) => {\n    try {\n      const response = await apiCall(\"/api/script/improve\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          selectedText,\n          improvementCommand,\n          script\n        })\n      });\n      if (response.success) {\n        return {\n          success: true,\n          improvedText: response.data.improvedText\n        };\n      }\n      return {\n        success: false,\n        error: response.error\n      };\n    } catch (error) {\n      console.error(\"Script improvement error:\", error);\n      return {\n        success: false,\n        error: error.message || \"Script improvement failed. Please try again.\"\n      };\n    }\n  };\n  const analyzeScriptQuality = async script => {\n    try {\n      const response = await apiCall(\"/api/script/quality\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          script\n        })\n      });\n      if (response.success) {\n        return {\n          success: true,\n          quality: response.data.quality\n        };\n      }\n      return {\n        success: false,\n        error: response.error\n      };\n    } catch (error) {\n      console.error(\"Script quality analysis error:\", error);\n      return {\n        success: false,\n        error: error.message || \"Script quality analysis failed. Please try again.\"\n      };\n    }\n  };\n  const extendScript = async (script, topic, contentType = \"Лайфстайл\") => {\n    try {\n      const response = await apiCall(\"/api/script/extend\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          script,\n          topic,\n          contentType\n        })\n      });\n      if (response.success) {\n        return {\n          success: true,\n          extension: response.data.extension\n        };\n      }\n      return {\n        success: false,\n        error: response.error\n      };\n    } catch (error) {\n      console.error(\"Script extension error:\", error);\n      return {\n        success: false,\n        error: error.message || \"Script extension failed. Please try again.\"\n      };\n    }\n  };\n  const generateAudio = async (text, voiceId = \"JBFqnCBsd6RMkjVDRZzb\") => {\n    try {\n      const response = await apiCall(\"/api/audio/generate\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          text,\n          voiceId\n        })\n      });\n      if (response.success) {\n        return {\n          success: true,\n          audio: response.data\n        };\n      }\n      return {\n        success: false,\n        error: response.error\n      };\n    } catch (error) {\n      console.error(\"Audio generation error:\", error);\n      return {\n        success: false,\n        error: error.message || \"Audio generation failed. Please try again.\"\n      };\n    }\n  };\n  const getAvailableVoices = async () => {\n    try {\n      const response = await apiCall(\"/api/audio/voices\");\n      if (response.success) {\n        return {\n          success: true,\n          voices: response.data.voices\n        };\n      }\n      return {\n        success: false,\n        error: response.error\n      };\n    } catch (error) {\n      console.error(\"Get voices error:\", error);\n      return {\n        success: false,\n        error: error.message || \"Failed to fetch available voices.\"\n      };\n    }\n  };\n  const createProject = async projectData => {\n    try {\n      const response = await apiCall(\"/api/projects\", {\n        method: \"POST\",\n        body: JSON.stringify(projectData)\n      });\n      if (response.success) {\n        return {\n          success: true,\n          project: response.data.project\n        };\n      }\n      return {\n        success: false,\n        error: response.error\n      };\n    } catch (error) {\n      console.error(\"Create project error:\", error);\n      return {\n        success: false,\n        error: error.message || \"Failed to create project.\"\n      };\n    }\n  };\n  const getProjects = async () => {\n    try {\n      const response = await apiCall(\"/api/projects\");\n      if (response.success) {\n        return {\n          success: true,\n          projects: response.data.projects\n        };\n      }\n      return {\n        success: false,\n        error: response.error\n      };\n    } catch (error) {\n      console.error(\"Get projects error:\", error);\n      return {\n        success: false,\n        error: error.message || \"Failed to fetch projects.\"\n      };\n    }\n  };\n  const updateProject = async (projectId, updateData) => {\n    try {\n      const response = await apiCall(`/api/projects/${projectId}`, {\n        method: \"PUT\",\n        body: JSON.stringify(updateData)\n      });\n      if (response.success) {\n        return {\n          success: true,\n          project: response.data.project\n        };\n      }\n      return {\n        success: false,\n        error: response.error\n      };\n    } catch (error) {\n      console.error(\"Update project error:\", error);\n      return {\n        success: false,\n        error: error.message || \"Failed to update project.\"\n      };\n    }\n  };\n  const deleteProject = async projectId => {\n    try {\n      const response = await apiCall(`/api/projects/${projectId}`, {\n        method: \"DELETE\"\n      });\n      if (response.success) {\n        return {\n          success: true,\n          message: response.message\n        };\n      }\n      return {\n        success: false,\n        error: response.error\n      };\n    } catch (error) {\n      console.error(\"Delete project error:\", error);\n      return {\n        success: false,\n        error: error.message || \"Failed to delete project.\"\n      };\n    }\n  };\n  const refreshUser = async () => {\n    try {\n      const response = await apiCall(\"/api/auth/me\");\n      if (response.success) {\n        setUser(response.data.user);\n        return {\n          success: true,\n          user: response.data.user\n        };\n      }\n      return {\n        success: false,\n        error: response.error\n      };\n    } catch (error) {\n      console.error(\"Refresh user error:\", error);\n      return {\n        success: false,\n        error: error.message || \"Failed to refresh user data.\"\n      };\n    }\n  };\n  const getTokenInfo = () => {\n    return JWTService.getTokenInfo();\n  };\n  const value = {\n    user,\n    loading,\n    isAuthenticated,\n    register,\n    login,\n    logout,\n    refreshToken,\n    getTokenInfo,\n    generateScript,\n    generateKeyPoints,\n    improveScript,\n    analyzeScriptQuality,\n    extendScript,\n    generateAudio,\n    getAvailableVoices,\n    createProject,\n    getProjects,\n    updateProject,\n    deleteProject,\n    refreshUser,\n    apiCall,\n    API_BASE_URL\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 511,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"xBgiRagNfQVCfEr2dT2PptfN+TE=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","JWTService","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","API_BASE_URL","process","env","REACT_APP_API_URL","AuthProvider","children","_s2","user","setUser","loading","setLoading","isAuthenticated","setIsAuthenticated","apiCall","endpoint","options","url","token","localStorage","getItem","isTokenExpired","logout","config","headers","Authorization","response","fetch","data","json","status","ok","error","checkAuth","clearAuth","success","setItem","JSON","stringify","setupTokenRefresh","refreshToken","removeItem","checkPaymentSuccess","method","newToken","urlParams","URLSearchParams","window","location","search","sessionId","get","console","log","history","replaceState","document","title","pathname","register","name","email","password","body","userData","message","login","generateScript","topic","duration","keyPoints","contentType","script","generateKeyPoints","points","improveScript","selectedText","improvementCommand","improvedText","analyzeScriptQuality","quality","extendScript","extension","generateAudio","text","voiceId","audio","getAvailableVoices","voices","createProject","projectData","project","getProjects","projects","updateProject","projectId","updateData","deleteProject","refreshUser","getTokenInfo","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Scriptify/ai-content-studio/frontend/src/contexts/AuthContext.jsx"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from \"react\";\r\nimport JWTService from \"../components/utils/jwt\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error(\"useAuth must be used within an AuthProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000\";\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n  const apiCall = async (endpoint, options = {}) => {\r\n    const url = `${API_BASE_URL}${endpoint}`;\r\n    const token = localStorage.getItem(\"authToken\");\r\n\r\n    if (token && JWTService.isTokenExpired(token)) {\r\n      await logout();\r\n      throw new Error(\"Token expired\");\r\n    }\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        ...(token && { Authorization: `Bearer ${token}` }),\r\n        ...options.headers,\r\n      },\r\n      ...options,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(url, config);\r\n      const data = await response.json();\r\n\r\n      if (response.status === 401) {\r\n        await logout();\r\n        throw new Error(\"Unauthorized\");\r\n      }\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.error || \"Something went wrong\");\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      const token = localStorage.getItem(\"authToken\");\r\n\r\n      if (!token) {\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      if (JWTService.isTokenExpired(token)) {\r\n        JWTService.clearAuth();\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await apiCall(\"/api/auth/me\");\r\n\r\n        if (response.success) {\r\n          setUser(response.data.user);\r\n          setIsAuthenticated(true);\r\n          localStorage.setItem(\"userData\", JSON.stringify(response.data.user));\r\n          JWTService.setupTokenRefresh(refreshToken, token);\r\n        } else {\r\n          localStorage.removeItem(\"authToken\");\r\n          localStorage.removeItem(\"userData\");\r\n          JWTService.clearAuth();\r\n        }\r\n      } catch (error) {\r\n        localStorage.removeItem(\"authToken\");\r\n        localStorage.removeItem(\"userData\");\r\n        JWTService.clearAuth();\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    checkPaymentSuccess();\r\n    checkAuth();\r\n  }, []);\r\n\r\n  const refreshToken = async () => {\r\n    try {\r\n      const response = await apiCall(\"/api/auth/refresh\", {\r\n        method: \"POST\",\r\n      });\r\n\r\n      if (response.success && response.data.token) {\r\n        const newToken = response.data.token;\r\n        localStorage.setItem(\"authToken\", newToken);\r\n\r\n        JWTService.setupTokenRefresh(refreshToken, newToken);\r\n      }\r\n    } catch (error) {\r\n      await logout();\r\n    }\r\n  };\r\n\r\n  const checkPaymentSuccess = async () => {\r\n    try {\r\n      const urlParams = new URLSearchParams(window.location.search);\r\n      const sessionId = urlParams.get(\"session_id\");\r\n      const success = urlParams.get(\"success\");\r\n\r\n      if (sessionId && success === \"true\") {\r\n        const token = localStorage.getItem(\"authToken\");\r\n\r\n        if (!token) {\r\n          console.log(\"❌ No auth token found\");\r\n          return;\r\n        }\r\n\r\n        try {\r\n          const response = await apiCall(`/api/payments/session/${sessionId}`);\r\n\r\n          if (response.success && response.data.user) {\r\n            setUser(response.data.user);\r\n            localStorage.setItem(\r\n              \"userData\",\r\n              JSON.stringify(response.data.user)\r\n            );\r\n          }\r\n        } catch (error) {\r\n          console.error(\"❌ Payment verification failed:\", error);\r\n        }\r\n        window.history.replaceState(\r\n          {},\r\n          document.title,\r\n          window.location.pathname\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(\"❌ Payment check error:\", error);\r\n    }\r\n  };\r\n\r\n  const register = async (name, email, password) => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      const response = await apiCall(\"/api/auth/register\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify({ name, email, password }),\r\n      });\r\n\r\n      if (response.success) {\r\n        const { user: userData, token } = response.data;\r\n\r\n        localStorage.setItem(\"authToken\", token);\r\n        localStorage.setItem(\"userData\", JSON.stringify(userData));\r\n\r\n        setUser(userData);\r\n        setIsAuthenticated(true);\r\n\r\n        JWTService.setupTokenRefresh(refreshToken, token);\r\n        return { success: true, user: userData };\r\n      }\r\n\r\n      return { success: false, error: response.error };\r\n    } catch (error) {\r\n      console.error(\"Registration error:\", error);\r\n      return {\r\n        success: false,\r\n        error: error.message || \"Registration failed. Please try again.\",\r\n      };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      const response = await apiCall(\"/api/auth/login\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n\r\n      if (response.success) {\r\n        const { user: userData, token } = response.data;\r\n\r\n        localStorage.setItem(\"authToken\", token);\r\n        localStorage.setItem(\"userData\", JSON.stringify(userData));\r\n        setUser(userData);\r\n        setIsAuthenticated(true);\r\n\r\n        JWTService.setupTokenRefresh(refreshToken, token);\r\n        return { success: true, user: userData };\r\n      }\r\n\r\n      return { success: false, error: response.error };\r\n    } catch (error) {\r\n      console.error(\"Login error:\", error);\r\n      return {\r\n        success: false,\r\n        error: error.message || \"Login failed. Please try again.\",\r\n      };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      await apiCall(\"/api/auth/logout\", { method: \"POST\" });\r\n    } catch (error) {\r\n      console.error(\"Logout error:\", error);\r\n    } finally {\r\n      localStorage.removeItem(\"authToken\");\r\n      localStorage.removeItem(\"userData\");\r\n      setUser(null);\r\n      setIsAuthenticated(false);\r\n    }\r\n  };\r\n  const generateScript = async (\r\n    topic,\r\n    duration = \"medium\",\r\n    keyPoints = [],\r\n    contentType = \"Лайфстайл\"\r\n  ) => {\r\n    try {\r\n      const response = await apiCall(\"/api/script/generate\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify({ topic, duration, keyPoints, contentType }),\r\n      });\r\n\r\n      if (response.success) {\r\n        return { success: true, script: response.data.script };\r\n      }\r\n\r\n      return { success: false, error: response.error };\r\n    } catch (error) {\r\n      console.error(\"Script generation error:\", error);\r\n      return {\r\n        success: false,\r\n        error: error.message || \"Script generation failed. Please try again.\",\r\n      };\r\n    }\r\n  };\r\n\r\n  const generateKeyPoints = async (topic, contentType = \"Лайфстайл\") => {\r\n    try {\r\n      const response = await apiCall(\"/api/script/key-points\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify({ topic, contentType }),\r\n      });\r\n\r\n      if (response.success) {\r\n        return { success: true, points: response.data.points };\r\n      }\r\n\r\n      return { success: false, error: response.error };\r\n    } catch (error) {\r\n      console.error(\"Key points generation error:\", error);\r\n      return {\r\n        success: false,\r\n        error:\r\n          error.message || \"Key points generation failed. Please try again.\",\r\n      };\r\n    }\r\n  };\r\n\r\n  const improveScript = async (selectedText, improvementCommand, script) => {\r\n    try {\r\n      const response = await apiCall(\"/api/script/improve\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify({ selectedText, improvementCommand, script }),\r\n      });\r\n\r\n      if (response.success) {\r\n        return { success: true, improvedText: response.data.improvedText };\r\n      }\r\n\r\n      return { success: false, error: response.error };\r\n    } catch (error) {\r\n      console.error(\"Script improvement error:\", error);\r\n      return {\r\n        success: false,\r\n        error: error.message || \"Script improvement failed. Please try again.\",\r\n      };\r\n    }\r\n  };\r\n\r\n  const analyzeScriptQuality = async (script) => {\r\n    try {\r\n      const response = await apiCall(\"/api/script/quality\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify({ script }),\r\n      });\r\n\r\n      if (response.success) {\r\n        return { success: true, quality: response.data.quality };\r\n      }\r\n\r\n      return { success: false, error: response.error };\r\n    } catch (error) {\r\n      console.error(\"Script quality analysis error:\", error);\r\n      return {\r\n        success: false,\r\n        error:\r\n          error.message || \"Script quality analysis failed. Please try again.\",\r\n      };\r\n    }\r\n  };\r\n\r\n  const extendScript = async (script, topic, contentType = \"Лайфстайл\") => {\r\n    try {\r\n      const response = await apiCall(\"/api/script/extend\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify({ script, topic, contentType }),\r\n      });\r\n\r\n      if (response.success) {\r\n        return { success: true, extension: response.data.extension };\r\n      }\r\n\r\n      return { success: false, error: response.error };\r\n    } catch (error) {\r\n      console.error(\"Script extension error:\", error);\r\n      return {\r\n        success: false,\r\n        error: error.message || \"Script extension failed. Please try again.\",\r\n      };\r\n    }\r\n  };\r\n\r\n  const generateAudio = async (text, voiceId = \"JBFqnCBsd6RMkjVDRZzb\") => {\r\n    try {\r\n      const response = await apiCall(\"/api/audio/generate\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify({ text, voiceId }),\r\n      });\r\n\r\n      if (response.success) {\r\n        return { success: true, audio: response.data };\r\n      }\r\n\r\n      return { success: false, error: response.error };\r\n    } catch (error) {\r\n      console.error(\"Audio generation error:\", error);\r\n      return {\r\n        success: false,\r\n        error: error.message || \"Audio generation failed. Please try again.\",\r\n      };\r\n    }\r\n  };\r\n\r\n  const getAvailableVoices = async () => {\r\n    try {\r\n      const response = await apiCall(\"/api/audio/voices\");\r\n\r\n      if (response.success) {\r\n        return { success: true, voices: response.data.voices };\r\n      }\r\n\r\n      return { success: false, error: response.error };\r\n    } catch (error) {\r\n      console.error(\"Get voices error:\", error);\r\n      return {\r\n        success: false,\r\n        error: error.message || \"Failed to fetch available voices.\",\r\n      };\r\n    }\r\n  };\r\n\r\n  const createProject = async (projectData) => {\r\n    try {\r\n      const response = await apiCall(\"/api/projects\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify(projectData),\r\n      });\r\n\r\n      if (response.success) {\r\n        return { success: true, project: response.data.project };\r\n      }\r\n\r\n      return { success: false, error: response.error };\r\n    } catch (error) {\r\n      console.error(\"Create project error:\", error);\r\n      return {\r\n        success: false,\r\n        error: error.message || \"Failed to create project.\",\r\n      };\r\n    }\r\n  };\r\n\r\n  const getProjects = async () => {\r\n    try {\r\n      const response = await apiCall(\"/api/projects\");\r\n\r\n      if (response.success) {\r\n        return { success: true, projects: response.data.projects };\r\n      }\r\n\r\n      return { success: false, error: response.error };\r\n    } catch (error) {\r\n      console.error(\"Get projects error:\", error);\r\n      return {\r\n        success: false,\r\n        error: error.message || \"Failed to fetch projects.\",\r\n      };\r\n    }\r\n  };\r\n\r\n  const updateProject = async (projectId, updateData) => {\r\n    try {\r\n      const response = await apiCall(`/api/projects/${projectId}`, {\r\n        method: \"PUT\",\r\n        body: JSON.stringify(updateData),\r\n      });\r\n\r\n      if (response.success) {\r\n        return { success: true, project: response.data.project };\r\n      }\r\n\r\n      return { success: false, error: response.error };\r\n    } catch (error) {\r\n      console.error(\"Update project error:\", error);\r\n      return {\r\n        success: false,\r\n        error: error.message || \"Failed to update project.\",\r\n      };\r\n    }\r\n  };\r\n\r\n  const deleteProject = async (projectId) => {\r\n    try {\r\n      const response = await apiCall(`/api/projects/${projectId}`, {\r\n        method: \"DELETE\",\r\n      });\r\n\r\n      if (response.success) {\r\n        return { success: true, message: response.message };\r\n      }\r\n\r\n      return { success: false, error: response.error };\r\n    } catch (error) {\r\n      console.error(\"Delete project error:\", error);\r\n      return {\r\n        success: false,\r\n        error: error.message || \"Failed to delete project.\",\r\n      };\r\n    }\r\n  };\r\n\r\n  const refreshUser = async () => {\r\n    try {\r\n      const response = await apiCall(\"/api/auth/me\");\r\n\r\n      if (response.success) {\r\n        setUser(response.data.user);\r\n        return { success: true, user: response.data.user };\r\n      }\r\n\r\n      return { success: false, error: response.error };\r\n    } catch (error) {\r\n      console.error(\"Refresh user error:\", error);\r\n      return {\r\n        success: false,\r\n        error: error.message || \"Failed to refresh user data.\",\r\n      };\r\n    }\r\n  };\r\n\r\n  const getTokenInfo = () => {\r\n    return JWTService.getTokenInfo();\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    isAuthenticated,\r\n    register,\r\n    login,\r\n    logout,\r\n    refreshToken,\r\n    getTokenInfo,\r\n    generateScript,\r\n    generateKeyPoints,\r\n    improveScript,\r\n    analyzeScriptQuality,\r\n    extendScript,\r\n    generateAudio,\r\n    getAvailableVoices,\r\n    createProject,\r\n    getProjects,\r\n    updateProject,\r\n    deleteProject,\r\n    refreshUser,\r\n    apiCall,\r\n    API_BASE_URL,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}